<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pls="http://www.w3.org/2005/01/pronunciation-lexicon" xmlns:ssml="http://www.w3.org/2001/10/synthesis" xmlns:svg="http://www.w3.org/2000/svg">
<head>
  <meta charset="UTF-8" />
  <title>5 I/O and NIO</title>
  <link type="text/css" rel="stylesheet" media="all" href="style.css" />
  <link type="text/css" rel="stylesheet" media="all" href="core.css" />
</head>
<body>
  <div id="sbo-rt-content"><section epub:type="chapter">
<p class="image"><img src="images/common-01.jpg" alt="Images" /></p>
<h2 class="h2p" id="ch5"><span id="page_249" epub:type="pagebreak"></span>5</h2>
<h2 class="h2p1">I/O and NIO</h2>
<p class="title-o"><span class="white">CERTIFICATION OBJECTIVES</span></p>
<p class="toc-l">•       Read and Write Data from the Console</p>
<p class="toc-l">•       Use BufferedReader, BufferedWriter, File, FileReader, FileWriter, FileInputStream, FileOutputStream, ObjectOutputStream, ObjectInputStream, and PrintWriter in the java.io Package</p>
<p class="toc-l">•       Use Path Interface to Operate on File and Directory Paths</p>
<p class="toc-l">•       Use Files Class to Check, Read, Delete, Copy, Move, Manage Metadata of a File or Directory</p>
<p class="toc-l">•       Use Stream API with NIO.2</p>
<p class="toc-lq"><img src="images/tick.jpg" alt="Images" />     Two-Minute Drill</p>
<p class="toc-q"><strong>Q&amp;A</strong>   Self Test</p>
<p class="noindent-d"><span id="page_250" epub:type="pagebreak"></span><span class="dropcap">I</span>/O (input/output) has been around since the beginning of Java. You could read and write files along with some other common operations. Then with Java 1.4, Java added more I/O functionality and cleverly named it NIO. That stands for “new I/O.” Don’t worry—you won’t be asked about those Java 1.4 additions on the exam.</p>
<p class="indent">The APIs prior to Java 7 still had a few limitations when you had to write applications that focused heavily on files and file manipulation. Trying to write a little routine listing all the files created in the past day within a directory tree would have given you some headaches. There was no support for navigating directory trees, and just reading attributes of a file was also quite hard. As of Java 7, this whole routine is fewer than 15 lines of code!</p>
<p class="indent">Now what to name yet another I/O API? The name “new I/O” was taken, and “new new I/O” would just sound silly. Since the Java 7 functionality was added to package names that began with <code>java.nio</code>, the new name was NIO.2. For the purposes of this chapter and the exam, NIO is shorthand for NIO.2.</p>
<p class="indent">Since NIO (or NIO.2 if you like) builds on the original I/O, some of those concepts are still tested on the exam in addition to the new parts. Fortunately, you won’t have to become a total I/O or NIO guru to do well on the exam. The intention of the exam team was to include just the basic aspects of these technologies, and in this chapter, we cover <em>more</em> than you’ll need to get through these objectives on the exam.</p>
<h5 class="title-o"><span class="white">CERTIFICATION OBJECTIVE</span></h5>
<h3 class="h3" id="ch5lev1sec1"><strong>File Navigation and I/O (OCP Objectives 8.1 and 8.2)</strong></h3>
<p class="noindent"><em>8.1 Read and write data from the console.</em></p>
<p class="noindent"><em>8.2 Use BufferedReader, BufferedWriter, File, FileReader, FileWriter, FileInputStream, FileOutputStream, ObjectOutputStream, ObjectInputStream, and PrintWriter in the java.io package. </em></p>
<p class="indentt">I/O has had a strange history with the OCP certification. It was included in all the versions of the exam, up to and including 1.2, then removed from the 1.4 exam, reintroduced for Java 5, extended for Java 6, and extended still more for Java 7 and 8.</p>
<p class="indent"><span id="page_251" epub:type="pagebreak"></span>I/O is a huge topic in general, and the Java APIs that deal with I/O in one fashion or another are correspondingly huge. A general discussion of I/O could include topics such as file I/O, console I/O, thread I/O, high-performance I/O, byte-oriented I/O, character-oriented I/O, I/O filtering and wrapping, serialization, and more. Luckily for us, the I/O topics included in the Java 8 exam are fairly well restricted to file I/O for characters and serialization. </p>
<p class="indent">Here’s a summary of the I/O classes you’ll need to understand for the exam:</p>
<p class="bullt"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>File</strong> The API says that the <code>File</code> class is “an abstract representation of file and directory pathnames.” The <code>File</code> class isn’t used to actually read or write data; it’s used to work at a higher level, making new empty files, searching for files, deleting files, making directories, and working with paths.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>FileReader</strong> This class is used to read character files. Its <code>read()</code> methods are fairly low-level, allowing you to read single characters, the whole stream of characters, or a fixed number of characters. <code>FileReader</code>s are usually <em>wrapped</em> by higher-level objects such as <code>BufferedReader</code>s, which improve performance and provide more convenient ways to work with the data.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>BufferedReader</strong> This class is used to make lower-level <code>Reader</code> classes like <code>FileReader</code> more efficient and easier to use. Compared to <code>FileReader</code>s, <code>BufferedReader</code>s read relatively large chunks of data from a file at once and keep this data in a buffer. When you ask for the next character or line of data, it is retrieved from the buffer, which minimizes the number of times that time-intensive file-read operations are performed. In addition, <code>BufferedReader</code> provides more convenient methods, such as <code>readLine()</code>, that allow you to get the next line of characters from a file.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>FileWriter</strong> This class is used to write to character files. Its <code>write()</code> methods allow you to write character(s) or strings to a file. <code>FileWriter</code>s are usually <em>wrapped</em> by higher-level <code>Writer</code> objects, such as <code>BufferedWriter</code>s or <code>PrintWriter</code>s, which provide better performance and higher-level, more flexible methods to write data.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>BufferedWriter</strong> This class is used to make lower-level classes like <code>FileWriter</code>s more efficient and easier to use. Compared to <code>FileWriter</code>s, <code>BufferedWriter</code>s write relatively large chunks of data to a file at once, minimizing the number of times that slow file-writing operations are <span id="page_252" epub:type="pagebreak"></span>performed. The <code>BufferedWriter</code> class also provides a <code>newLine()</code> method to create platform-specific line separators automatically.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>PrintWriter</strong> This class has been enhanced significantly in Java 5. Because of newly created methods and constructors (like building a <code>PrintWriter</code> with a <code>File</code> or a <code>String</code>), you might find that you can use <code>PrintWriter</code> in places where you previously needed a <code>Writer</code> to be wrapped with a <code>FileWriter</code> and/or a <code>BufferedWriter</code>. New methods like <code>format()</code>, <code>printf()</code>, and <code>append()</code> make <code>PrintWriter</code>s quite flexible and powerful.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>FileInputStream</strong> This class is used to read <code>byte</code>s from files and can be used for binary as well as text. Like <code>FileReader</code>, the <code>read()</code> methods are low-level, allowing you to read single <code>byte</code>s, a stream of <code>byte</code>s, or a fixed number of <code>byte</code>s. We typically use <code>FileInputStream</code> with higher-level objects such as <code>ObjectInputStream</code>.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>FileOutputStream</strong> This class is used to write <code>byte</code>s to files. We typically use <code>FileOutputStream</code> with higher-level objects such as <code>ObjectOutputStream</code>.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>ObjectInputStream</strong> This class is used to read an input stream and deserialize objects. We use <code>ObjectInputStream</code> with lower-level classes like <code>FileInputStream</code> to read from a file. <code>ObjectInputStream</code> works at a higher level so that you can read objects rather than characters or bytes. This process is called <em>deserialization.</em></p>
<div class="side">
<p class="exam"><img src="images/exam.jpg" alt="Images" /></p>
</div>
<div class="side1">
<p class="indent"><strong><em>Classes with “Stream” in their name are used to read and write bytes, and <em>Reader</em>s and <em>Writer</em>s are used to read and write characters.</em></strong></p>
</div>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>ObjectOutputStream</strong> This class is used to write objects to an output stream and is used with classes like <code>FileOutputStream</code> to write to a file. This is called <em>serialization.</em> Like <code>ObjectInputStream</code>, <code>ObjectOutputStream</code> works at a higher level to write objects, rather than characters or bytes.</p>
<p class="bullb"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>Console</strong> This Java 6 convenience class provides methods to read input from the console and write formatted output to the console.</p>
<h4 class="h4" id="ch5lev2sec1"><strong>Creating Files Using the File Class</strong></h4>
<p class="noindent">Objects of type <code>File</code> are used to represent the actual files (but not the data in the files) or directories that exist on a computer’s physical disk. Just to make sure we’re clear, when we talk about an object of type <code>File</code>, we’ll say <code>File</code>, with a capital <em>F</em>. <span id="page_253" epub:type="pagebreak"></span>When we’re talking about what exists on a hard drive, we’ll call it a file with a lowercase <em>f</em> (unless it’s a variable name in some code). Let’s start with a few basic examples of creating files, writing to them, and reading from them. First, let’s create a new file and write a few lines of data to it:</p>
<p class="imageip"><img src="images/un253-01.jpg" alt="Images" /></p>
<p class="indent">If you compile and run this program, when you look at the contents of your current directory, you’ll discover absolutely no indication of a file called <code>fileWrite1.txt</code>. When you make a new instance of the class <code>File</code><em>, you’re not yet making an actual file; you’re just creating a filename.</em> Once you have a <code>File</code> <em>object,</em> there are several ways to make an actual file. Let’s see what we can do with the <code>File</code> object we just made:</p>
<p class="imageip"><img src="images/un253-02.jpg" alt="Images" /></p>
<p class="noindent">This produces the output</p>
<p class="imageip"><img src="images/un253-03.jpg" alt="Images" /></p>
<p class="noindent"><span id="page_254" epub:type="pagebreak"></span>And also produces an empty file in your current directory. If you run the code a <em>second</em> time, you get the output</p>
<p class="imageip"><img src="images/un254-01.jpg" alt="Images" /></p>
<p class="indent">Let’s examine these sets of output:</p>
<p class="bullt"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>First execution</strong> The first call to <code>exists()</code> returned <code>false</code>, which we expected…remember, <code>new File()</code> doesn’t create a file on the disk! The <code>createNewFile()</code> method created an actual file and returned <code>true</code>, indicating that a new file was created and that one didn’t already exist. Finally, we called <code>exists()</code> again, and this time it returned <code>true</code>, indicating the file existed on the disk.</p>
<p class="bullb"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>Second execution</strong> The first call to <code>exists()</code> returns <code>true</code> because we built the file during the first run. Then the call to <code>createNewFile()</code> returns <code>false</code> since the method didn’t create a file this time through. Of course, the last call to <code>exists()</code> returns <code>true</code>.</p>
<p class="indent">A couple of other new things happened in this code. First, notice that we had to put our file creation code in a try/catch. This is true for almost all of the file I/O code you’ll ever write. I/O is one of those inherently risky things. We’re keeping it simple for now and ignoring the exceptions, but we still need to follow the handle-or-declare rule, since most I/O methods declare checked exceptions. We’ll talk more about I/O exceptions later. We used a couple of <code>File</code>’s methods in this code:</p>
<div class="side">
<p class="exam"><img src="images/exam.jpg" alt="Images" /></p>
</div>
<div class="side1">
<p class="indent"><strong><em>Remember, the exam creators are trying to jam as much code as they can into a small space, so in the previous example, instead of these three lines of code:</em></strong></p>
<p class="imageep"><img src="images/un254-02.jpg" alt="Images" /></p>
<p class="noindent"><strong><em>you might see something like the following single line of code, which is a bit harder to read, but accomplishes the same thing:</em></strong></p>
<p class="imageep"><img src="images/un254-03.jpg" alt="Images" /></p>
</div>
<p class="bullt"><span id="page_255" epub:type="pagebreak"></span><img class="inline" src="images/box.jpg" alt="Images" />   <strong>boolean exists()</strong> This method returns <code>true</code> if it can find the actual file.</p>
<p class="bullb"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>boolean createNewFile()</strong> This method creates a new file if it doesn’t already exist.</p>
<h4 class="h4" id="ch5lev2sec2"><strong>Using FileWriter and FileReader</strong></h4>
<p class="noindent">In practice, you probably won’t use the <code>FileWriter</code> and <code>FileReader</code> classes without wrapping them (more about “wrapping” very soon). That said, let’s go ahead and do a little “naked” file I/O:</p>
<p class="imageip"><img src="images/un255-01.jpg" alt="Images" /></p>
<p class="noindent">which produces the output:</p>
<p class="imageip"><img src="images/un255-02.jpg" alt="Images" /></p>
<p class="indent"><span id="page_256" epub:type="pagebreak"></span>Here’s what just happened:</p>
<p class="numlist">1.   <code>FileWriter fw = new FileWriter(file)</code> did three things:</p>
<p class="alpha-a">a.   It created a <code>FileWriter</code> reference variable, <code>fw</code>.</p>
<p class="alpha-a">b.   It created a <code>FileWriter</code> object and assigned it to <code>fw</code>.</p>
<p class="alpha-a">c.   It created an actual empty file out on the disk (and you can prove it).</p>
<p class="numlist">2.   We wrote 12 characters to the file with the <code>write()</code> method, and we did a <code>flush()</code> and a <code>close()</code>.</p>
<p class="numlist">3.  We made a new <code>FileReader</code> object, which also opened the file on disk for reading.</p>
<p class="numlist">4.  The <code>read()</code> method read the whole file, a character at a time, and put it into the <code>char[] in</code>.</p>
<p class="numlistb">5.   We printed out the number of characters we read in <code>size</code>, and we looped through the <code>in</code> array, printing out each character we read, and then we closed the file.</p>
<p class="indent">Before we go any further, let’s talk about <code>flush()</code> and <code>close()</code>. When you write data out to a stream, some amount of buffering will occur, and you never know for sure exactly when the last of the data will actually be sent. You might perform many write operations on a stream before closing it, and invoking the <code>flush()</code> method guarantees that the last of the data you thought you had already written actually gets out to the file. Whenever you’re done using a file, either reading it or writing to it, you should invoke the <code>close()</code> method. When you are doing file I/O, you’re using expensive and limited operating system resources, and so when you’re done, invoking <code>close()</code> will free up those resources.</p>
<p class="indent">Now, back to our last example. This program certainly works, but it’s painful in a couple of different ways:</p>
<p class="numlistt">1.   When we were writing data to the file, we manually inserted line separators (in this case <code>\n</code>) into our data.</p>
<p class="numlistb">2.   When we were reading data back in, we put it into a character array. It being an array and all, we had to declare its size beforehand, so we’d have 257been in trouble if we hadn’t made it big enough! We could have read the data in one character at a time, looking for the end of the file after each <code>read()</code>, but that’s pretty painful too.</p>
<p class="indent"><span id="page_257" epub:type="pagebreak"></span>Because of these limitations, we’ll typically want to use higher-level I/O classes like <code>BufferedWriter</code> or <code>BufferedReader</code> in combination with <code>FileWriter</code> or <code>FileReader</code>.</p>
<h4 class="h4" id="ch5lev2sec3"><strong>Using FileInputStream and FileOutputStream</strong></h4>
<p class="noindent">Using <code>FileInputStream</code> and <code>FileOutputStream</code> is similar to using <code>FileReader</code> and <code>FileWriter</code>, except you’re working with byte data instead of character data. That means you can use <code>FileInputStream</code> and <code>FileOutputStream</code> to read and write binary data as well as text data.</p>
<p class="indent">We’ve rewritten the previous example to use <code>FileInputStream</code> and <code>FileOutputStream</code>; the code does exactly the same thing, but because we’re working with bytes instead of characters, we made a few small modifications, which we’ll point out:</p>
<p class="imageip"><img src="images/un257-01.jpg" alt="Images" /></p>
<p class="noindent"><span id="page_258" epub:type="pagebreak"></span>As you can see, this example is almost exactly like the previous one, except we’re using bytes rather than chars. That means we convert the <code>String</code> we write to the file to bytes for the <code>write()</code> method, and when we read, we read into an array of <code>byte</code>s, rather than an array of <code>char</code>s, and convert each <code>byte</code> to a <code>char</code> before we print it. </p>
<p class="indent">And like the previous example, this one is painful in the same ways. You’ll typically find you use higher-level I/O classes like <code>ObjectInputStream</code> and <code>ObjectOutputStream</code>, rather than <code>FileInputStream</code> and <code>FileOutputStream</code>, unless you really need to read binary data byte by byte. <br/>We talk about <code>ObjectInputStream</code> and <code>ObjectOutputStream</code> in the <br/>section on serialization later in the chapter.</p>
<h4 class="h4" id="ch5lev2sec4"><strong>Combining I/O Classes</strong></h4>
<p class="noindent">Java’s entire I/O system was designed around the idea of using several classes in combination. Combining I/O classes is sometimes called <em>wrapping</em> and sometimes called <em>chaining. </em>The <code>java.io</code> package contains about 50 classes, 10 interfaces, and 15 exceptions. Each class in the package has a specific purpose (i.e., highly specialized), and the classes are designed to be combined with each other in countless ways to handle a wide variety of situations.</p>
<p class="indent">When it’s time to do some I/O in real life, you’ll undoubtedly find yourself poring over the <code>java.io</code> API, trying to figure out which classes you’ll need and how to hook them together. For the exam, you’ll need to do the same thing, but Oracle artificially reduced the API (phew!). In terms of studying for Exam Objective 8.2, we can imagine that the entire <code>java.io</code> package—consisting of the classes listed in Exam Objective 8.2 and summarized in <a href="ch5.xhtml#ch5tab1">Table 5-1</a>—is our mini I/O API.</p>
<p class="tabcap" id="ch5tab1"><span class="table"><strong>TABLE 5-1</strong></span> <code>java.io</code> Mini API</p>
<p class="imaget"><img src="images/tab05-01.jpg" alt="Images" /></p>
<p class="indent">Now let’s say we want to find a less painful way to write data to a file and read the file’s contents back into memory. Starting with the task of writing data to a file, here’s a process for determining what classes we’ll need and how we’ll hook them together:</p>
<p class="numlist">1.   We know that ultimately we want to hook to a <code>File</code> object. So whatever other class or classes we use, one of them must have a constructor that takes an object of type <code>File</code>.</p>
<p class="numlist">2.   Find a method that sounds like the most powerful, easiest way to accomplish the task. When we look at <a href="ch5.xhtml#ch5tab1">Table 5-1</a> we can see that <code>BufferedWriter</code> has a <code>newLine()</code> method. That sounds a little better 259than having to manually embed a separator after each line, but if we look further, we see that <code>PrintWriter</code> has a method called <code>println()</code>. That sounds like the easiest approach of all, so we’ll go with it.</p>
<p class="numlist"><span id="page_259" epub:type="pagebreak"></span>3.   When we look at <code>PrintWriter</code>’s constructors, we see that we can build a <code>PrintWriter</code> object if we have an object of type <code>File</code>, so all we need to do to create a <code>PrintWriter</code> object is the following:</p>
<p class="imageqp"><img src="images/un259-01.jpg" alt="Images" /></p>
<p class="indent">Okay, time for a pop quiz. Prior to Java 5, <code>PrintWriter</code> did not have constructors that took either a <code>String</code> or a <code>File</code>. If you were writing some I/O code in Java 1.4, how would you get a <code>PrintWriter</code> to write data to a file? Hint: You can figure this out by studying the mini I/O API in <a href="ch5.xhtml#ch5tab1">Table 5-1</a>.</p>
<p class="indent"><span id="page_260" epub:type="pagebreak"></span>Here’s one way to go about solving this puzzle: First, we know that we’ll create a <code>File</code> object on one end of the chain and that we want a <code>PrintWriter</code> object on the other end. We can see in <a href="ch5.xhtml#ch5tab1">Table 5-1</a> that a <code>PrintWriter</code> can also be built using a <code>Writer</code> object. Although <code>Writer</code> isn’t a <em>class</em> we see in the table, we can see that several other classes extend <code>Writer</code>, which, for our purposes, is just as good; any class that extends <code>Writer</code> is a candidate. Looking further, we can see that <code>FileWriter</code> has the two attributes we’re looking for:</p>
<p class="bullt"><img class="inline" src="images/box.jpg" alt="Images" />   It can be constructed using a <code>File</code>.</p>
<p class="bullb"><img class="inline" src="images/box.jpg" alt="Images" />   It extends <code>Writer</code>.</p>
<p class="indent">Given all of this information, we can put together the following code (remember, this is a Java 1.4 example):</p>
<p class="imageip"><img src="images/un260-01.jpg" alt="Images" /></p>
<p class="indent">At this point, it should be fairly easy to put together the code to more easily read data from the file back into memory. Again, looking through the table, we see a method called <code>readLine()</code> that sounds like a much better way to read data. Going through a similar process, we get the following code:</p>
<p class="imageip"><img src="images/un260-02.jpg" alt="Images" /></p>
<div class="side">
<p class="exam"><img src="images/exam.jpg" alt="Images" /></p>
</div>
<div class="side1">
<p class="indent"><span id="page_261" epub:type="pagebreak"></span><strong><em>You’re almost certain to encounter exam questions that test your knowledge of how I/O classes can be chained. If you’re not totally clear on this last section, we recommend using <a href="ch5.xhtml#ch5tab1">Table 5-1</a> as a reference and writing code to experiment with which chaining combinations are legal and which are illegal.</em></strong></p>
</div>
<h4 class="h4" id="ch5lev2sec5"><strong>Working with Files and Directories</strong></h4>
<p class="noindent">Earlier, we touched on the fact that the <code>File</code> class is used to create files and directories. In addition, <code>File</code>’s methods can be used to delete files, rename files, determine whether files exist, create temporary files, change a file’s attributes, and differentiate between files and directories. A point that is often confusing is that an object of type <code>File</code> is used to represent <em>either</em> <em>a file or a</em> <em>directory.</em> We’ll talk about both cases next.</p>
<p class="indent">We saw earlier that the statement</p>
<p class="imageip"><img src="images/un261-01.jpg" alt="Images" /></p>
<p class="noindent">always creates a <code>File</code> object and then does one of two things:</p>
<p class="numlistt">1.   If <code>"foo"</code> does NOT exist, no actual file is created.</p>
<p class="numlistb">2.   If <code>"foo"</code> <em>does</em> exist, the new <code>File</code> object refers to the existing file.</p>
<p class="indent">Notice that <code>File file = new File("foo");</code> NEVER creates an actual file. There are two ways to create a file:</p>
<p class="numlistt">1.   Invoke the <code>createNewFile()</code> method on a <code>File</code> object. For example:</p>
<p class="imageqp"><img src="images/un261-03.jpg" alt="Images" /></p>
<p class="numlist">2.   Create a <code>Writer</code> or a <code>Stream</code>. Specifically, create a <code>FileWriter</code>, a <code>PrintWriter</code>, or a <code>FileOutputStream</code>. Whenever you create an instance of one of these classes, you automatically create a file, unless one already exists, for instance:</p>
<p class="imageqp"><img src="images/un261-04.jpg" alt="Images" /></p>
<p class="indent"><span id="page_262" epub:type="pagebreak"></span>Creating a directory is similar to creating a file. Again, we’ll use the convention of referring to an object of type <code>File</code> that represents an actual directory as a <code>Directory</code> object, with a capital <em>D</em> (even though it’s of type <code>File</code>). We’ll call an actual directory on a computer a directory, with a small <em>d</em>. Phew! As with creating a file, creating a directory is a two-step process; first we create a <code>Directory</code> (<code>File</code>) object; then we create an actual directory using the following <code>mkdir()</code> method:</p>
<p class="imageip"><img src="images/un262-01.jpg" alt="Images" /></p>
<p class="indent">Once you’ve got a directory, you put files into it and work with those files:</p>
<p class="imageip"><img src="images/un262-02.jpg" alt="Images" /></p>
<p class="indent">This code is making a new file in a subdirectory. Since you provide the subdirectory to the constructor, from then on, you just refer to the file by its reference variable. In this case, here’s a way that you could write some data to the file <code>myFile</code>:</p>
<p class="imageip"><img src="images/un262-03.jpg" alt="Images" /></p>
<p class="indent">Be careful when you’re creating new directories! As we’ve seen, constructing a <code>Writer</code> or a <code>Stream</code> will often create a file for you automatically if one doesn’t exist, but that’s not true for a directory.</p>
<p class="imageip"><img src="images/un262-04.jpg" alt="Images" /></p>
<p class="noindent">This will generate an exception that looks something like</p>
<p class="imageip"><img src="images/un262-05.jpg" alt="Images" /></p>
<p class="indent">You can refer a <code>File</code> object to an existing file or directory. For example, assume we already have a subdirectory called <code>existingDir</code> in which an existing file <code>existingDirFile.txt</code> resides. This file contains several lines of text. When we run the following code:</p>
<p class="imageip"><img src="images/un262-06.jpg" alt="Images" /></p>
<p class="imageip"><span id="page_263" epub:type="pagebreak"></span><img src="images/un263-01.jpg" alt="Images" /></p>
<p class="noindent">the following output will be generated:</p>
<p class="imageip"><img src="images/un263-02.jpg" alt="Images" /></p>
<p class="indent">Take special note of what the <code>readLine()</code> method returns. When there is no more data to read, <code>readLine()</code> returns a <code>null</code>—this is our signal to stop reading the file. Also, notice that we didn’t invoke a <code>flush()</code> method. When reading a file, no flushing is required, so you won’t even find a <code>flush()</code> method in a <code>Reader</code> kind of class.</p>
<p class="indent">In addition to creating files, the <code>File</code> class lets you do things like renaming and deleting files. The following code demonstrates a few of the most common ins and outs of deleting files and directories (via <code>delete()</code>) and renaming files and directories (via <code>renameTo()</code>):</p>
<p class="imageip"><img src="images/un263-03.jpg" alt="Images" /></p>
<p class="noindent"><span id="page_264" epub:type="pagebreak"></span>This outputs</p>
<p class="imageip"><img src="images/un264-01.jpg" alt="Images" /></p>
<p class="noindent">and leaves us with a directory called <code>newDir</code> that contains a file called <code>newName.txt</code>. Here are some rules that we can deduce from this result:</p>
<p class="bullt"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>delete()</strong> You can’t delete a directory if it’s not empty, which is why the invocation <code>delDir.delete()</code> failed.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>renameTo()</strong> You must give the existing <code>File</code> object a valid new <code>File</code> object with the new name that you want. (If <code>newName</code> had been <code>null</code>, we would have gotten a <code>NullPointerException</code>.)</p>
<p class="bullb"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>renameTo()</strong> It’s okay to rename a directory, even if it isn’t empty.</p>
<p class="indent">There’s a lot more to learn about using the <code>java.io</code> package, but as far as the exam goes, we only have one more thing to discuss, and that is how to search for a file. Assuming we have a directory named <code>searchThis</code> that we want to search through, the following code uses the <code>File.list()</code> method to create a <code>String</code> array of files and directories. We then use the enhanced <code>for</code> loop to iterate through and print.</p>
<p class="imageip"><img src="images/un264-02.jpg" alt="Images" /></p>
<p class="indent">On our system, we got the following output:</p>
<p class="imageip"><img src="images/un264-03.jpg" alt="Images" /></p>
<p class="noindent">Your results will almost certainly be different!</p>
<p class="indent">In this section, we’ve scratched the surface of what’s available in the <code>java.io</code> package. Entire books have been written about this package, so we’re obviously covering only a very small (but frequently used) portion of the API. On the other hand, if you understand everything we’ve covered in this section, you will be in great shape to handle any <code>java.io</code> questions you encounter on the exam, except for the <code>Console</code> class, which we’ll cover next. </p>
<h4 class="h4" id="ch5lev2sec6"><span id="page_265" epub:type="pagebreak"></span>The java.io.Console Class</h4>
<p class="noindent">Java 6 added the <code>java.io.Console</code> class. In this context, the <em>console</em> is the physical device with a keyboard and a display (like your Mac or PC). If you’re running Java SE 6 from the command line, you’ll typically have access to a console object, to which you can get a reference by invoking <code>System.console()</code>. Keep in mind that it’s possible for your Java program to be running in an environment that doesn’t have access to a console object, so be sure that your invocation of <code>System.console()</code> actually returns a valid console reference and not null.</p>
<p class="indent">The <code>Console</code> class makes it easy to accept input from the command line, both echoed and nonechoed (such as a password), and makes it easy to write formatted output to the command line. It’s a handy way to write test engines for unit testing or if you want to support a simple but secure user interaction and you don’t need a GUI.</p>
<p class="indent">On the input side, the methods you’ll have to understand are <code>readLine</code> and <code>readPassword</code>. The <code>readLine</code> method returns a string containing whatever the user keyed in—that’s pretty intuitive. However, the <code>readPassword</code> method doesn’t return a string; it returns a character array. Here’s the reason for this: Once you’ve got the password, you can verify it and then absolutely remove it from memory. If a string was returned, it could exist in a pool somewhere in memory, and perhaps some nefarious hacker could find it.</p>
<p class="indent">Let’s take a look at a small program that uses a console to support testing another class:</p>
<p class="imageip"><img src="images/un265-01.jpg" alt="Images" /></p>
<p class="imageip"><span id="page_266" epub:type="pagebreak"></span><img src="images/un266-01.jpg" alt="Images" /></p>
<p class="indent">Let’s review this code:</p>
<p class="bullt"><img class="inline" src="images/box.jpg" alt="Images" />   At line 1, we get a new <code>Console</code> object. Remember that we can’t say this:</p>
<p class="imagebp"><img src="images/un266-02.jpg" alt="Images" /></p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   At line 2, we invoke <code>readPassword</code>, which returns a <code>char[]</code>, not a string. You’ll notice when you test this code that the password you enter isn’t echoed on the screen.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   At line 3, we’re just manually displaying the password you keyed in, separating each character with a space. Later on in this chapter, you’ll read about the <code>format()</code> method, so stay tuned.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   At line 4, we invoke <code>readLine</code>, which returns a string.</p>
<p class="bullb"><img class="inline" src="images/box.jpg" alt="Images" />   At line 5 is the class that we want to test. We recommend that you use something like <code>NewConsole</code> to test the concepts that you’re learning.</p>
<p class="indent">The <code>Console</code> class has more capabilities than are covered here, but if you understand everything discussed so far, you’ll be in good shape for the exam.</p>
<h5 class="title-o"><span class="white">CERTIFICATION OBJECTIVE</span></h5>
<h3 class="h3" id="ch5lev1sec2">Files, Path, and Paths (OCP Objectives 9.1 and 9.2)</h3>
<p class="noindent"><em>9.1 Use Path interface to operate on file and directory paths.</em></p>
<p class="noindent"><em>9.2 Use Files class to check, read, delete, copy, move, manage metadata of a file </em><em>or di</em><em>rectory.</em></p>
<p class="indentt">The OCP 8 exam has two sections devoted to I/O. The previous section Oracle refers to as “Java I/O Fundamentals” (which we’ve referred to as the 8.<em>x</em> objectives), and it was focused on the <code>java.io</code> package. Now we’re going to look at the set of <span id="page_267" epub:type="pagebreak"></span>objectives Oracle calls “Java File I/O (NIO.2),” whose specific objectives we’ll refer to as 9.<em>x</em>. The term <em>NIO.2</em> is a bit loosely defined, but most people (and the exam creators) define NIO.2 as being the key new features introduced in Java 7 that reside in two packages:</p>
<p class="bullt"><img class="inline" src="images/box.jpg" alt="Images" />   <code>j</code><code>ava.nio.file</code></p>
<p class="bullb"><img class="inline" src="images/box.jpg" alt="Images" />   <code>j</code><code>ava.nio.file.attribute</code></p>
<p class="noindent">We’ll start by looking at the important classes and interfaces in the <code>java.nio.file</code> package, and then we’ll move to the <code>java.nio.file.attribute</code> package later in the chapter.</p>
<p class="indent">As you read earlier in the chapter, the <code>File</code> class represents a file or directory at a high level. NIO.2 adds three new central classes that you’ll need to understand well for the exam:</p>
<p class="bullt"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>Path</strong> This interface replaces <code>File</code> as the representation of a file or a directory when working in NIO.2. It is a lot more powerful than a <code>File</code>.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>Paths</strong> This class contains static methods that create <code>Path</code> objects. </p>
<p class="bullb"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>Files</strong> This class contains static methods that work with <code>Path</code> objects. You’ll find basic operations in here like copying or deleting files.</p>
<p class="indent">The interface <code>java.nio.file.Path</code> is one of the key classes of file-based I/O under NIO.2. Just like the good old <code>java.io.File</code>, a <code>Path</code> represents only a location in the file system, like <code>C:\java\workspace\ocpjp7</code> (a Windows directory) or <code>/home/nblack/docs</code> (the <code>docs</code> directory of user <code>nblack</code> on UNIX). When you create a <code>Path</code> to a new file, that file does not exist until you actually create the file using <code>Files.createFile(Path target)</code>. The <code>Files</code> utility class will be covered in depth in the next section.</p>
<div class="side">
<p class="exam"><img src="images/exam.jpg" alt="Images" /></p>
</div>
<div class="side1">
<p class="indent"><strong><em>The difference between <strong><em>File</em></strong>, <strong><em>Files</em></strong>, <strong><em>Path</em></strong>, and <strong><em>Paths</em></strong> is really important. Read carefully on the exam. A one-letter difference can mean a big difference in what the class does.</em></strong></p>
</div>
<p class="indent">Let’s take a look at these relationships another way. The <code>Paths</code> class is used to create a class implementing the <code>Path</code> interface. The <code>Files</code> class uses <code>Path</code> objects as parameters. All three of these were introduced in Java 7. Then there is the <code>File</code> class. It’s been around since the beginning. <code>File</code> and <code>Path</code> objects know how to convert to the other. This lets any older code interact with the new APIs <span id="page_268" epub:type="pagebreak"></span>in <code>Files</code>. But notice what is missing. In the figure, there is no line between <code>File</code> and <code>Files</code>. Despite the similarity in name, these two classes do not know about each other.</p>
<p class="imagef"><img src="images/un268-01.jpg" alt="Images" /></p>
<p class="indent">To make sure you know the difference between these key classes backward and forward, make sure you can fill in the four rightmost columns in <a href="ch5.xhtml#ch5tab2">Table 5-2</a>.</p>
<p class="tabcap" id="ch5tab2"><span class="table"><strong>TABLE 5-2</strong></span> Comparing the Core Classes</p>
<p class="imaget"><img src="images/tab05-02.jpg" alt="Images" /></p>
<h4 class="h4" id="ch5lev2sec7">Creating a Path</h4>
<p class="noindent">A <code>Path</code> object can be easily created by using the <code>get</code> methods from the <code>Paths</code> helper class. Remember you are calling <code>Paths.get()</code> and not <code>Path.get()</code>. If you don’t remember why, study the last section some more. It’s important to have this down cold.</p>
<p class="indent">Taking a look at two simple examples, we have:</p>
<p class="imageip"><img src="images/un268-02.jpg" alt="Images" /></p>
<p class="noindent"><span id="page_269" epub:type="pagebreak"></span>The actual method we just called is <code>Paths.get(String first, String... more)</code>. This means we can write it out by separating the parts of the path.</p>
<p class="imageip"><img src="images/un269-01.jpg" alt="Images" /></p>
<p class="noindent">As you can see, you can separate out folder and filenames as much or as little as you want when calling <code>Paths.get()</code>. For Windows, that is particularly cool because you can make the code easier to read by getting rid of the backslash and escape character.</p>
<p class="indent">Be careful when creating paths. The previous examples are absolute paths since they begin with the root (/ on UNIX or c: on Windows). When you don’t begin with the root, the <code>Path</code> is considered a relative path, which means Java looks from the current directory. Which <code>file1.txt</code> do you think <code>p6</code> has in mind?</p>
<p class="imageip"><img src="images/un269-02.jpg" alt="Images" /></p>
<p class="noindent">It depends. If the program is run from the root, it is the one in <code>/tmp/file1.txt</code>. If the program is run from <code>/tmp</code>, it is the one in <code>/tmp/tmp/file1.txt</code>. If the program is run from anywhere else, <code>p6</code> refers to a file that does not exist.</p>
<p class="indent">One more thing to watch for. If you are on Windows, you might deal with a URL that looks like <code>file:///c:/temp</code>. The <code>file://</code> is a protocol just like <code>http:</code><code>/</code><code>/</code> is. This syntax allows you to browse to a folder in Internet Explorer. Your program might have to deal with such a <code>String</code> that a user copied/pasted from the browser. No problem, right? We learned to code:</p>
<p class="imageip"><img src="images/un269-03.jpg" alt="Images" /></p>
<p class="noindent">Unfortunately, this doesn’t work, and you get an exception about the colon being invalid that looks something like this:</p>
<p class="imageip"><img src="images/un269-04.jpg" alt="Images" /></p>
<p class="indent"><code>Paths</code> provides another method that solves this problem. <code>Paths.get(URI uri)</code> lets you (indirectly) convert the <code>String</code> to a <code>URI</code> (Uniform Resource Identifier) before trying to create a <code>Path:</code></p>
<p class="imageip"><img src="images/un269-05.jpg" alt="Images" /></p>
<p class="indent"><span id="page_270" epub:type="pagebreak"></span>The last thing you should know is that the <code>Paths.get()</code> method we’ve been discussing is really a shortcut. You won’t need to code the longer version, but it is good to understand what is going on under the hood. First, Java finds out what the default file system is. For example, it might be <code>WindowsFileSystemProvider</code>. Then Java gets the path using custom logic for that file system. Luckily, this all goes on without us having to write any special code or even think about it.</p>
<p class="imageip"><img src="images/un270-01.jpg" alt="Images" /></p>
<p class="noindent">Now that you know how to create a <code>Path</code> instance, you can manipulate it in various ways. We’ll get back to that in a bit.</p>
<p class="text-icon"><img src="images/onjob.jpg" alt="Images" /></p>
<p class="text-icon1"><strong>As far as the exam is concerned, <strong><em>Paths.get()</em></strong> is how to create a <strong><em>Path</em></strong> initially. There is another way that is useful when working with code that was written before Java 7:</strong></p>
<p class="imageip"><img src="images/un270-02.jpg" alt="Images" /></p>
<p class="text-icon1"><strong>If you are updating older code that uses <strong><em>File</em></strong>, you can convert it to a <strong><em>Path</em></strong> and start calling the new classes. And if your newer code needs to call older code, it can convert back to a <strong><em>File</em></strong>.</strong></p>
<h4 class="h4" id="ch5lev2sec8">Creating Files and Directories</h4>
<p class="noindent">With I/O, we saw that a file doesn’t exist just because you have a <code>File</code> object. You have to call <code>createNewFile()</code>to bring the file into existence and <code>exists()</code>to check if it exists. Rewriting the example from earlier in the chapter to use NIO.2 methods, we now have:</p>
<p class="imageip"><img src="images/un270-03.jpg" alt="Images" /></p>
<p class="indent">NIO.2 has equivalent methods with two differences:</p>
<p class="bullt"><img class="inline" src="images/box.jpg" alt="Images" />   You call static methods on <code>Files</code> rather than instance methods on <code>File</code>.</p>
<p class="bullb"><img class="inline" src="images/box.jpg" alt="Images" />   Method names are slightly different.</p>
<p class="noindent">See <a href="ch5.xhtml#ch5tab3">Table 5-3</a> for the mapping between old class/method names and new ones. You can still continue to use the older I/O approach if you happen to be dealing with <code>File</code> objects.</p>
<p class="tabcap" id="ch5tab3"><span class="table"><strong>TABLE 5-3</strong></span> I/O vs. NIO.2</p>
<p class="imaget"><img src="images/tab05-03.jpg" alt="Images" /></p>
<p class="text-icon"><span id="page_271" epub:type="pagebreak"></span><img src="images/onjob.jpg" alt="Images" /></p>
<p class="text-icon1"><strong>The method <strong><em>Files.notExists()</em></strong> supplements <strong><em>Files.exists()</em></strong>. In some incredibly rare situations, Java won’t have enough permissions to know whether the file exists. When this happens, both methods return false.</strong></p>
<p class="indent">You can also create directories in Java. Suppose we have a directory named <code>/java</code> and we want to create the file <code>/java/source/directory/Program.java</code>. We could do this one at a time:</p>
<p class="imageip"><img src="images/un271-01.jpg" alt="Images" /></p>
<p class="noindent">Or we could create all the directories in one go:</p>
<p class="imageip"><img src="images/un271-02.jpg" alt="Images" /></p>
<p class="indent">Although both work, the second is clearly better if you have a lot of directories to create. And remember that the directory needs to exist by the time the file is created.</p>
<h4 class="h4" id="ch5lev2sec9"><span id="page_272" epub:type="pagebreak"></span>Copying, Moving, and Deleting Files</h4>
<p class="noindent">We often copy, move, or delete files when working with the file system. Up until Java 7, this was hard to do. Now, however, each is one line. Let’s look at some examples:</p>
<p class="imageip"><img src="images/un272-01.jpg" alt="Images" /></p>
<p class="noindent">This is all pretty self-explanatory. We copy a file, delete the copy, and then move the file. Now, let’s try another example:</p>
<p class="imageip"><img src="images/un272-02.jpg" alt="Images" /></p>
<p class="noindent">Java sees it is about to overwrite a file that already exists. Java doesn’t want us to lose the file, so it “asks” if we are sure by throwing an exception. <code>copy()</code>and <code>move()</code> actually take an optional third parameter—zero or more <code>CopyOption</code>s. The most useful option you can pass is <code>StandardCopyOption.REPLACE_EXISTING</code>.</p>
<p class="imageip"><img src="images/un272-03.jpg" alt="Images" /></p>
<p class="indent">We have to think about whether a file exists when deleting the file too. Let’s say we wrote this test code:</p>
<p class="imageip"><img src="images/un272-04.jpg" alt="Images" /></p>
<p class="indent">We don’t know whether <code>methodUnderTest</code> works properly yet. If it does, the code works fine. If it throws an exception, we never create the file and <code>Files.delete()</code> throws a <code>NoSuchFileException</code>. This is a problem, as we only<span id="page_273" epub:type="pagebreak"></span> want to delete the file if it was created so we aren’t leaving stray files around. There is an alternative. <code>Files.deleteIfExists(path)</code> returns true and deletes the file only if it exists. If not, it just quietly returns false. Most of the time, you can ignore this return value. You just want the file to not be there. If it never existed, mission accomplished.</p>
<p class="text-icon"><img src="images/onjob.jpg" alt="Images" /></p>
<p class="text-icon1"><strong>If you have to work on pre-Java 7 code, you can use the <strong><em>FileUtils</em></strong> class in Apache Commons IO (<a href="http://commons.apache.org/io">http://commons.apache.org/io</a>). It has methods similar to many of the copy, move, and delete methods that are now built into Java.</strong></p>
<p class="indent">To review, <a href="ch5.xhtml#ch5tab4">Table 5-4</a> lists the methods on <code>Files</code> that you are likely to come across on the exam. Luckily, the exam doesn’t expect you to know all 30 methods in the API. The important thing to remember is to check the <code>Files</code> JavaDoc when you find yourself dealing with files.</p>
<p class="tabcap" id="ch5tab4"><span class="table"><strong>TABLE 5-4</strong></span> <code>Files</code> Methods</p>
<p class="imaget"><img src="images/tab05-04.jpg" alt="Images" /></p>
<h4 class="h4" id="ch5lev2sec10">Retrieving Information about a Path</h4>
<p class="noindent">The <code>Path</code> interface defines a bunch of methods that return useful information about the path that you’re dealing with. In the following code listing, a <code>Path</code> is created referring to a directory and then we output information about the <code>Path</code> instance:</p>
<p class="imageip"><img src="images/un273-01.jpg" alt="Images" /></p>
<p class="imageip"><span id="page_274" epub:type="pagebreak"></span><img src="images/un274-01.jpg" alt="Images" /></p>
<p class="indent">When you execute this code snippet on Windows, the following output is printed:</p>
<p class="imageip"><img src="images/un274-02.jpg" alt="Images" /></p>
<p class="indent">Based on this output, it is fairly simple to describe what each method does. <a href="ch5.xhtml#ch5tab5">Table 5-5</a> does just that.</p>
<p class="tabcap" id="ch5tab5"><span class="table"><strong>TABLE 5-5</strong></span> <code>Path</code> Methods</p>
<p class="imaget"><img src="images/tab05-05.jpg" alt="Images" /></p>
<p class="indent">Here is yet another interesting fact about the <code>Path</code> interface: It extends from <code>Iterable&lt;Path&gt;</code>. At first sight, this seems anything but interesting. But every class that (correctly) implements the <code>Iterable&lt;?&gt;</code> interface can be used as an expression in the enhanced <code>for</code> loop. You know you can iterate through an array or a <code>List</code>, but you can iterate through a <code>Path</code> as well. That’s pretty cool!</p>
<p class="indent"><span id="page_275" epub:type="pagebreak"></span>Using this functionality, it’s easy to print the hierarchical tree structure of a file (or directory), as the following example shows:</p>
<p class="imageip"><img src="images/un275-01.jpg" alt="Images" /></p>
<p class="indent">When you run this example, a (simplistic) tree is printed. Thanks to the variable <code>spaces</code> (which is increased with each iteration by 2), the different subpaths are printed like a directory tree.</p>
<p class="imageip"><img src="images/un275-02.jpg" alt="Images" /></p>
<h4 class="h4" id="ch5lev2sec11">Normalizing a Path</h4>
<p class="noindent">Normally (no pun intended), when you create a <code>Path</code>, you create it in a direct way. However, all three of these return the same logical <code>Path</code>:</p>
<p class="imageip"><img src="images/un275-03.jpg" alt="Images" /></p>
<p class="noindent"><code>p1</code> is probably what you would type if you were coding. <code>p2</code> is just plain redundant. <code>p3</code> is more interesting. The two directories—<code>anotherDirectory</code> and <code>myDirectory</code>—are on the same level, but we have to go up one level to get there:</p>
<p class="imageip"><img src="images/un275-04.jpg" alt="Images" /></p>
<p class="indent">You might be wondering why on earth we wouldn’t just type <code>myDirectory</code> in the first place. And you would if you could. Sometimes, that doesn’t work out. Let’s look at a real example of why this might be.</p>
<p class="imageip"><img src="images/un275-05.jpg" alt="Images" /></p>
<p class="indent"><span id="page_276" epub:type="pagebreak"></span>If you wanted to compile <code>MyClass</code>, you would <code>cd</code> to <code>/My_Project/source</code> and run <code>javac MyClass.java</code>. Once your program gets bigger, it could be thousands of classes and have hundreds of jar files. You don’t want to type in all of those just to compile, so someone writes a script to build your program. <code>buildScript.sh</code> now finds everything that is needed to compile and runs the <code>javac</code> command for you. The problem is that the current directory is now <code>/Build_Project/scripts</code>, not <code>/My_Project/source</code>. The build script helpfully builds a path for you by doing something like this:</p>
<p class="imageip"><img src="images/un276-01.jpg" alt="Images" /></p>
<p class="noindent">which outputs:</p>
<p class="imageip"><img src="images/un276-02.jpg" alt="Images" /></p>
<p class="indent">Whew. The second one is much easier to read. The <code>normalize()</code> method knows that a single dot can be ignored. It also knows that any directory followed by two dots can be removed from a path.</p>
<p class="indent">Be careful when using this <code>normalize()</code>! It just looks at the <code>String</code> equivalent of the path and doesn’t check the file system to see whether the directories or files actually exist.</p>
<p class="indent">Let’s practice and see what <code>normalize</code> returns for these paths. This time, we aren’t providing a directory structure to show that the directories and files don’t need to be present on the computer. What do you think the following prints out?</p>
<p class="imageip"><img src="images/un276-03.jpg" alt="Images" /></p>
<p class="noindent">The output is</p>
<p class="imageip"><img src="images/un276-04.jpg" alt="Images" /></p>
<p class="noindent"><span id="page_277" epub:type="pagebreak"></span>The first one removes all the single dots since they just point to the current directory. The second doesn’t change anything since the dot is part of a filename and not a directory. The third sees one set of double dots, so it only goes up one directory. The last one is a little tricky. The two dots do say to go up one directory. But since there isn’t a directory before it, <code>Path</code> can’t simplify it.</p>
<p class="indent">To review, <code>normalize()</code> removes unneeded parts of the <code>Path</code>, making it more like you’d normally type it. (That’s not where the word “normalize” comes from, but it is a nice way to remember it.)</p>
<h4 class="h4" id="ch5lev2sec12">Resolving a Path</h4>
<p class="noindent">So far, you have an overview of all methods that can be invoked on a single <code>Path</code> object, but what if you need to combine two paths? You might want to do this if you have one <code>Path</code> representing your home directory and another containing the <code>Path</code> within that directory.</p>
<p class="imageip"><img src="images/un277-01.jpg" alt="Images" /></p>
<p class="indent"><code>path1.resolve(path2)</code> should be read as “resolve <code>path2</code> within <code>path1</code>’s directory.” In this example, we resolved the path of the <code>file</code> within the directory provided by <code>dir</code>.</p>
<p class="indent">Keeping this definition in mind, let’s look at some more complex examples:</p>
<p class="imageip"><img src="images/un277-02.jpg" alt="Images" /></p>
<p class="noindent">The output is</p>
<p class="imageip"><img src="images/un277-03.jpg" alt="Images" /></p>
<p class="indent"><span id="page_278" epub:type="pagebreak"></span>The first three do what you’d expect. They add the parameter to resolve to the provided path object. The fourth and fifth ones try to resolve an absolute path within the context of something else. The problem is that an absolute path doesn’t depend on other directories. It is absolute. Therefore, <code>resolve()</code> just returns that absolute path. The output of the sixth one looks a little bit weird, but Java does the only right thing to do here. For all it knows the <code>Path</code> referred to by <code>Model.pdf</code> may be a directory and the <code>Path</code> referred to by <code>dir</code> may be a file!</p>
<p class="indent">Just like <code>normalize()</code>, keep in mind that <code>resolve()</code> will not check that the directory or file actually exists. To review, <code>resolve()</code> tells you how to resolve one path within another.</p>
<div class="side">
<p class="exam"><img src="images/exam.jpg" alt="Images" /></p>
</div>
<div class="side1">
<p class="indent"><strong><em>Careful with methods that come in two flavors: one with a <code>Path</code> parameter and the other with a <code>String</code> parameter such as <code>resolve()</code>. The tricky part here is that <code>null</code> is a valid value for both a <code>Path</code> and a <code>String</code>. What will happen if you pass just <code>null</code> as a parameter? Which method will be invoked?</em></strong></p>
<p class="imageip"><img src="images/un278-01.jpg" alt="Images" /></p>
<p class="noindent-t"><strong><em>The compiler can’t decide which method to invoke: the one with the <code>Path</code> parameter or the other one with the <code>String</code> parameter. That’s why this code won’t compile, and if you see such code in an exam question, you’ll know what to do.</em></strong></p>
<p class="indent"><strong><em>The following examples will compile without any problem, because the compiler knows which method to invoke, thanks to the type of the variable <code>other</code> and the explicit cast to <code>String</code>.</em></strong></p>
<p class="imageip"><img src="images/un278-02.jpg" alt="Images" /></p>
</div>
<h4 class="h4" id="ch5lev2sec13">Relativizing a Path</h4>
<p class="noindent">Now suppose we want to do the opposite of resolve. We have the absolute path of our home directory and the absolute path of the music file in our home directory. We want to know just the music file directory and name.</p>
<p class="imageip"><img src="images/un278-03.jpg" alt="Images" /></p>
<p class="noindent">The output is </p>
<p class="imageip"><span id="page_279" epub:type="pagebreak"></span><img src="images/un279-01.jpg" alt="Images" /></p>
<p class="noindent">Java recognized that the <code>/home/java</code> part is the same and returned a path of just the remainder.</p>
<p class="indent"><code>path1.relativize(path2)</code> should be read as “give me a path that shows how to get from <code>path1</code> to <code>path2</code>.” In this example, we determined that <code>music</code> is a file in a directory named country within <code>dir</code>.</p>
<p class="indent">Keeping this definition in mind, let’s look at some more complex examples:</p>
<p class="imageip"><img src="images/un279-02.jpg" alt="Images" /></p>
<p class="noindent">The output is</p>
<p class="imageip"><img src="images/un279-03.jpg" alt="Images" /></p>
<p class="indent">Before you scratch your head, let’s look at the logical directory structure here. Keep in mind the directory doesn’t actually need to exist; this is just to visualize it.</p>
<p class="imageip"><img src="images/un279-04.jpg" alt="Images" /></p>
<p class="indent">Now we can trace it through. The first example is straightforward. It tells us how to get to <code>absolute3</code> from <code>absolute1</code> by going down two directories. The second is similar. We get to <code>absolute1</code> from <code>absolute3</code> by doing the opposite—going up two directories. Remember from <code>normalize()</code> that a double dot means to go up a directory.</p>
<p class="indent"><span id="page_280" epub:type="pagebreak"></span>The third output statement says that we have to go up two directories and then down two directories to get from <code>absolute1</code> to <code>absolute2</code>. Java knows this because we provided absolute paths. The worst possible case is to have to go all the way up to the root like we did here.</p>
<p class="indent">The fourth output statement is okay. Even though they are both relative paths, there is enough in common for Java to tell what the difference in the path is.</p>
<p class="indent">The fifth example throws an exception. Java can’t figure out how to make a relative path out of one absolute path and one relative path.</p>
<p class="indent">Remember, <code>relativize()</code> and <code>resolve()</code> are opposites. And just like <code>resolve()</code>, <code>relativize()</code> does not check that the path actually exists. To review, <code>relativize()</code> tells you how to get a relative path between two paths.</p>
<h5 class="title-o"><span class="white">CERTIFICATION OBJECTIVE</span></h5>
<h3 class="h3" id="ch5lev1sec3"><strong>File and Directory Attributes (OCP Objective 9.2)</strong></h3>
<p class="noindent"><em>9.2 Use Files class to check, read, delete, copy, move, manage metadata of a file or directory.</em></p>
<div class="side">
<p class="exam"><img src="images/exam.jpg" alt="Images" /></p>
</div>
<div class="side1">
<p class="indent"><strong><em>Metadata is data about data. For a file, you can think of the stuff that’s in the file as the data, and the attributes of the file, like the date the file was created, as the metadata; that is, the data about the data that’s in the file. When you see “metadata” in this objective, think “attributes” of files and directories.</em></strong></p>
</div>
<h4 class="h4" id="ch5lev2sec14">Reading and Writing Attributes the Easy Way</h4>
<p class="noindent">In this section, we’ll add classes and interfaces from the <code>java.nio.file</code><code>.attribute</code> package to the discussion. Prior to NIO.2, you could read and write just a handful of attributes. Just like we saw when creating files, there is a new way to do this using <code>Files</code> instead of <code>File</code>. Oracle also took the opportunity to clean <span id="page_281" epub:type="pagebreak"></span>up the method signatures a bit. The following example creates a file, changes the last modified date, prints it out, and deletes the file using both the old and new method names. We might do this if we want to make a file look as if it were created in the past. (As you can see, there is a lesson about not relying on file timestamps here!)</p>
<p class="imageip"><img src="images/un281-01.jpg" alt="Images" /></p>
<p class="noindent">As you can see from the output, the only change in functionality is that the new <code>Files.getLastModifiedTime()</code> uses a human-friendly date format.</p>
<p class="imageip"><img src="images/un281-02.jpg" alt="Images" /></p>
<p class="indent">The other common type of attribute you can set are file permissions. Both Windows and UNIX have the concept of three types of permissions. Here’s what they mean:</p>
<p class="bullt"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>Read</strong> You can open the file or list what is in that directory.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>Write</strong> You can make a change to the file or add a file to that directory.</p>
<p class="bullb"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>Execute</strong> You can run the file if it is a runnable program or go into that directory.</p>
<p class="indent"><span id="page_282" epub:type="pagebreak"></span>Printing out the file permissions is easy. Note that these permissions are just for the user who is running the program—you! There are other types of permissions as well, but these can’t be set in one line.</p>
<p class="imageip"><img src="images/un282-01.jpg" alt="Images" /></p>
<p class="indent"><a href="ch5.xhtml#ch5tab6">Table 5-6</a> shows how to get and set these attributes that can be set in one line, both using the older I/O way and the new <code>Files</code> class. You may have noticed that setting file permissions isn’t in the table. That’s more code, so we will talk about it later.</p>
<p class="tabcap" id="ch5tab6"><span class="table"><strong>TABLE 5-6</strong></span> I/O vs. NIO.2 Permissions</p>
<p class="imaget"><img src="images/tab05-06.jpg" alt="Images" /></p>
<h4 class="h4" id="ch5lev2sec15">Types of Attribute Interfaces</h4>
<p class="noindent">The attributes you set by calling methods on <code>Files</code> are the most straightforward ones. Beyond that, Java NIO.2 added attribute interfaces so you could read attributes that might not be on every operating system.</p>
<p class="bullt"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>BasicFileAttributes</strong> In the JavaDoc, Oracle says these are “attributes common to many file systems.” What they mean is that you can rely on these attributes being available to you unless you are writing Java code for some funky new operating system. Basic attributes include things like creation date.</p>
<p class="bull"><span id="page_283" epub:type="pagebreak"></span><img class="inline" src="images/box.jpg" alt="Images" />   <strong>PosixFileAttributes</strong> POSIX stands for Portable Operating System Interface. This interface is implemented by both UNIX- and Linux-based operating systems. You can remember this because POSIX ends in “x,” as do UNIX and Linux.</p>
<p class="bullb"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>DosFileAttributes</strong> DOS stands for Disk Operating System. It is part of all Windows operating systems. Even Windows 8 and 10 have a DOS prompt available.</p>
<p class="noindent">There are also separate interfaces for setting or updating attributes. While the details aren’t in scope for the exam, you should be familiar with the purpose of each one.</p>
<p class="bullt"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>BasicFileAttributeView</strong> Used to set the last updated, last accessed, and creation dates.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>PosixFileAttributeView</strong> Used to set the groups or permissions on UNIX/Linux systems. There is an easier way to set these permissions though, so you won’t be using the attribute view.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>DosFileAttributeView</strong> Used to set file permissions on DOS/Windows systems. Again, there is an easier way to set these, so you won’t be using the attribute view.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>FileOwnerAttributeView</strong> Used to set the primary owner of a file or directory.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>AclFileAttributeView</strong> Sets more advanced permissions on a file or directory.</p>
<h4 class="h4" id="ch5lev2sec16">Working with BasicFileAttributes</h4>
<p class="noindent">The <code>BasicFileAttributes</code> interface provides methods to get information about a file or directory.</p>
<p class="imageip"><img src="images/un283-01.jpg" alt="Images" /></p>
<p class="indent">The sample output shows that all three date/time values can be different. A file is created once. It can be modified many times. And it can be last accessed for reading <span id="page_284" epub:type="pagebreak"></span>after that. The <code>isDirectory</code> method is the same as <code>Files.isDirectory(path)</code>. It is just an alternative way of getting the same information.</p>
<p class="imageip"><img src="images/un284-01.jpg" alt="Images" /></p>
<p class="indent">There are some more attributes on <code>BasicFileAttributes</code>, but they aren’t on the exam and you aren’t likely to need them when coding. Just remember to check the JavaDoc if you need more information about a file.</p>
<p class="indent">So far, you’ve noticed that all the attributes are read only. That’s because Java provides a different interface for updating attributes. Let’s write code to update the last accessed time:</p>
<p class="imageip"><img src="images/un284-02.jpg" alt="Images" /></p>
<p class="indent">In this example, we demonstrated getting all three times. In practice, when calling <code>setTimes()</code>, you should pass null values for any of the times you don’t want to change, and only pass <code>FileTime</code>s for the times you want to change.</p>
<p class="indent">The key takeaways here are that the “<code>XxxFileAttributes</code>” classes are read only and the “<code>XxxFileAttributeView</code>” classes allow updates.</p>
<div class="side">
<p class="exam"><img src="images/exam.jpg" alt="Images" /></p>
</div>
<div class="side1">
<p class="indent"><strong><em>The <code>BasicFileAttributes and BasicFileAttributeView</code> interfaces are a bit confusing. They have similar names but different functionality, and you get them in different ways. Try to remember these three things:</em></strong></p>
<p class="bullt"><img class="inline" src="images/box.jpg" alt="Images" />   <strong><em><code>BasicFileAttributeView</code> is singular, but <code>BasicFileAttributes</code> is not.</em></strong></p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong><em>You get <code>BasicFileAttributeView</code> using <code>Files.getFileAttribute View,</code> and you get <code>BasicFile Attributes</code> using <code>Files.read Attributes.</code></em></strong></p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>You can ONLY update attributes in <em>BasicFileAttributeView</em>, not in <em>BasicFileAttributes</em>. Remember that the view is for updating.</strong></p>
</div>
<p class="indent"><span id="page_285" epub:type="pagebreak"></span><code>PosixFileAttributes</code> and <code>DosFileAttributes</code> inherit from <code>BasicFileAttributes</code>. This means you can call Basic methods on a POSIX or DOS subinterface.</p>
<p class="imagef"><img src="images/un285-01.jpg" alt="Images" /></p>
<p class="indent">Try to use the more general type if you can. For example, if you are only going to use basic attributes, just get <code>BasicFileAttributes</code>. This lets your code remain operating system independent. If you are using a mix of basic and POSIX attributes, you can use <code>PosixFileAttributes</code> directly rather than calling <code>readAttributes()</code> twice to get two different ones.</p>
<h4 class="h4" id="ch5lev2sec17">Working with DosFileAttributes</h4>
<p class="noindent"><code>DosFileAttributes</code> adds four more attributes to the basics. We’ll look at the most common ones here—hidden files and read-only files. Hidden files typically begin with a dot and don’t show up when you type <strong>dir</strong> to list the contents of a directory. Read-only files are what they sound like—files that can’t be updated. (The other two attributes are “archive” and “system,” which you are quite unlikely to ever use.)</p>
<p class="imageip"><img src="images/un285-02.jpg" alt="Images" /></p>
<p class="noindent">The output is</p>
<p class="imageip"><span id="page_286" epub:type="pagebreak"></span><img src="images/un286-01.jpg" alt="Images" /></p>
<p class="indent">The first tricky thing in this code is that the <code>String</code> “<code>readonly</code>” is lowercase even though the method name is mixed case. If you forget and use the <code>String</code> “<code>readOnly</code>,” an <code>IllegalArgumentException</code> will be thrown at runtime. </p>
<p class="indent">The other tricky thing is that you cannot delete a read-only file. That’s why the code calls <code>setAttribute</code> a second time with <code>false</code> as a parameter, to make it no longer “read only” so the code can clean up after itself. And you can see that we had to call <code>readAttributes</code> again to see those updated values.</p>
<p class="text-icon"><img src="images/onjob.jpg" alt="Images" /></p>
<p class="text-icon1"><strong>There is an alternative way to set these attributes so you don’t have to worry about the <em>String</em> values. However, the exam wants you to know how to use <strong><em>Files</em></strong>. It is good to know both ways, though.</strong></p>
<p class="imageip"><img src="images/un286-02.jpg" alt="Images" /></p>
<h4 class="h4" id="ch5lev2sec18">Working with PosixFileAttributes</h4>
<p class="noindent"><code>PosixFileAttributes</code> adds two more attributes to the basics—groups and permissions. On UNIX, every file or directory has both an owner and group name.</p>
<p class="indent">UNIX permissions are also more elaborate than the basic ones. Each file or directory has nine permissions set in a <code>String</code>. A sample is “rwxrw-r--.” Breaking this into groups of three, we have “rwx”, “rw-,” and “r--.” These sets of permissions correspond to who gets them. In this example, the “user” (owner) of the file has read, write, and execute permissions. The “group” only has read and write permissions. UNIX calls everyone who is not the owner or in the group “other.” “Other” only has read access in this example.</p>
<p class="indent">Now let’s look at some code to set the permissions and output them in human-readable form:</p>
<p class="imageip"><img src="images/un286-03.jpg" alt="Images" /></p>
<p class="noindent"><span id="page_287" epub:type="pagebreak"></span>The output looks like this:</p>
<p class="imageip"><img src="images/un287-01.jpg" alt="Images" /></p>
<p class="noindent">It’s not symmetric. We gave Java the permissions in cryptic UNIX format and got them back in plain English. You can also output the group name:</p>
<p class="imageip"><img src="images/un287-02.jpg" alt="Images" /></p>
<p class="noindent">which outputs something like this:</p>
<p class="imageip"><img src="images/un287-03.jpg" alt="Images" /></p>
<h4 class="h4" id="ch5lev2sec19">Reviewing Attributes</h4>
<p class="noindent">Let’s review the most common attributes information in <a href="ch5.xhtml#ch5tab7">Table 5-7</a>.</p>
<p class="tabcap" id="ch5tab7"><span class="table"><strong>TABLE 5-7</strong></span> Common Attributes</p>
<p class="imaget"><img src="images/tab05-07.jpg" alt="Images" /></p>
<h5 class="title-o"><span id="page_288" epub:type="pagebreak"></span><span class="white">CERTIFICATION OBJECTIVE</span></h5>
<h3 class="h3" id="ch5lev1sec4"><strong>DirectoryStream (OCP Objectives 9.2 and 9.3)</strong></h3>
<p class="noindent"><em>9.2 Use Files class to check, read, delete, copy, move, manage metadata of a file </em><em>or directory.</em></p>
<p class="noindent"><em>9.3 Use Stream API with NIO.2.</em></p>
<p class="indentt">Now let’s return to more NIO.2 capabilities that you’ll find in the <code>java.nio.file</code> package… You might need to loop through a directory. Let’s say you were asked to list out all the users with a home directory on this computer.</p>
<p class="imageip"><img src="images/un288-01.jpg" alt="Images" /></p>
<p class="noindent">As expected, this outputs</p>
<p class="imageip"><img src="images/un288-02.jpg" alt="Images" /></p>
<p class="indent">The <code>DirectoryStream</code> interface lets you iterate through a directory. But this is just the tip of the iceberg. Let’s say we have hundreds of users and each day we want to only report on a few of them. The first day, we only want the home directories of users whose names begin with either the letter <em>v</em> or the letter <em>w.</em></p>
<p class="imageip"><img src="images/un288-03.jpg" alt="Images" /></p>
<p class="noindent">This time, the output is</p>
<p class="imageip"><img src="images/un288-04.jpg" alt="Images" /></p>
<p class="indent"><span id="page_289" epub:type="pagebreak"></span>Let’s examine the expression <code>[vw]*</code>. <code>[vw]</code> means either of the characters <code>v</code> or <code>w</code>. The <code>*</code> is a wildcard that means zero or more of any character. Notice this is not a regular expression. (If it were, the syntax would be <code>[vw].*</code>—see the dot in there.) <code>DirectoryStream</code> uses something called a <em>glob</em>. We will see more on globs later in the chapter.</p>
<p class="indent">There is one limitation with <code>DirectoryStream</code>. It can only look at one directory. One way to remember this is that it works like the <code>dir</code> command in DOS or the <code>ls</code> command in UNIX. Or you can remember that <code>DirectoryStream</code> streams one directory.</p>
<h4 class="h4" id="ch5lev2sec20">FileVisitor </h4>
<p class="noindent">Luckily, there is another class that does, in fact, look at subdirectories. Let’s say you want to get rid of all the .class files before zipping up and submitting your assignment. You could go through each directory manually, but that would get tedious really fast. You could write a complicated command in Windows and another in UNIX, but then you’d have two programs that do the same thing. Luckily, you can use Java and only write the code once.</p>
<p class="indent">Java provides a <code>SimpleFileVisitor</code>. You extend it and override one or more methods. Then you can call <code>Files.</code><em>walkFileTree</em>, which knows how to recursively look through a directory structure and call methods on a visitor subclass. Let’s try our example:</p>
<p class="imageip"><img src="images/un289-01.jpg" alt="Images" /></p>
<p class="imageip"><span id="page_290" epub:type="pagebreak"></span><img src="images/un290-01.jpg" alt="Images" /></p>
<p class="indent">This is a simple file visitor. It only implements one method: <code>visitFile</code>. This method is called for every file in the directory structure. It checks the extension of the file and deletes it if appropriate. In our case, two .class files are deleted.</p>
<p class="indent">There are two parameters to <code>visitFile()</code>. The first one is the <code>Path</code> object representing the current file. The other is a <code>BasicFileAttributes</code> interface. Do you remember what this does? That’s right—it lets you find out if the current file is a directory, when it was created, and many other similar pieces of data.</p>
<p class="indent">Finally, <code>visitFile()</code>returns <code>FileVisitResult.</code><em>CONTINUE</em>. This tells <code>walkFileTree()</code> that it should keep looking through the directory structure for more files.</p>
<p class="indent">Now that we have a feel for the power of this class, let’s take a look at all the methods available to us with another example:</p>
<p class="imageip"><img src="images/un290-02.jpg" alt="Images" /></p>
<p class="noindent">You might get the following output:</p>
<p class="imageip"><span id="page_291" epub:type="pagebreak"></span><img src="images/un291-01.jpg" alt="Images" /></p>
<p class="indent">Note that Java goes down as deep as it can before returning back up the tree. This is called a <em>depth-first search</em>. We said “might” because files and directories at the same level can get visited in either order.</p>
<p class="indent">You can override as few or as many of the four methods as you’d like. Note that the second half of the methods have IOException as a parameter. This allows those methods to handle problems that came earlier when walking through the tree. <a href="ch5.xhtml#ch5tab8">Table 5-8</a> summarizes the methods.</p>
<p class="tabcap" id="ch5tab8"><span class="table"><strong>TABLE 5-8</strong></span> <code>FileVisitor</code> Methods</p>
<p class="imaget"><img src="images/tab05-08.jpg" alt="Images" /></p>
<p class="indent">You actually do have some control, though, through those <code>FileVisitResult</code> constants. Suppose we changed the <code>preVisitDirectory</code> method to the following:</p>
<p class="imageip"><img src="images/un291-02.jpg" alt="Images" /></p>
<p class="noindent">Now the output is</p>
<p class="imageip"><span id="page_292" epub:type="pagebreak"></span><img src="images/un292-01.jpg" alt="Images" /></p>
<p class="indent">Since we instructed the program to skip the entire <code>child</code> subtree—i.e., we don’t see the file: <code>b.txt</code>, or the subdirectory: <code>grandchild</code>—we also don’t see the post visit call.</p>
<p class="indent">Now what do you think would happen if we changed <code>FileVisitResult.</code><code>SKIP_SUBTREE</code> to <code>FileVisitResult</code><code>.</code><code>TERMINATE</code>? The output might be:</p>
<p class="imageip"><img src="images/un292-02.jpg" alt="Images" /></p>
<p class="noindent">We see that as soon as the “child” directory came up, the program stopped walking the tree. And again, we are using “might” in terms of the output. It’s also possible for <code>emptyChild</code> to come up first, in which case, the last line of the output would be <code>/home/emptyChild</code>.</p>
<p class="indent">There’s one more result type. What do you think would happen if we changed <code>FileVisitResult.</code><code>TERMINATE</code> to <code>FileVisitResult.SKIP_SIBLINGS</code>? The output happens to be the same as the previous example: </p>
<p class="imageip"><img src="images/un292-03.jpg" alt="Images" /></p>
<p class="indent"><code>SKIP_SIBLINGS</code> is a combination of <code>SKIP_SUBTREE</code> and “don’t look in any folders at the same level.” This means we skip everything under <code>child</code> and also skip <code>emptyChild</code>.</p>
<p class="indent">One more example to make sure you really understand what is going on. What do you think gets output if we use this method?</p>
<p class="imageip"><img src="images/un292-04.jpg" alt="Images" /></p>
<p class="noindent"><span id="page_293" epub:type="pagebreak"></span>Assuming <code>child</code> is encountered before <code>emptyChild</code>, the output is</p>
<p class="imageip"><img src="images/un293-01.jpg" alt="Images" /></p>
<p class="noindent">We don’t see <code>file: c.txt</code> or <code>post: /home/child/grandchild</code> because we skip <code>grandchild</code> the subtree. We don’t see <code>post: /home/emptyChild</code> because we skip siblings of <code>emptyChild</code>. But wait. Isn’t <code>/home/child</code> a sibling? It is. But the visitor goes in order. Since <code>child</code> was seen before <code>emptyChild</code>, it is too late to skip it. Just like when you print a document, it is too late to prevent pages from printing that have already printed. File visitor can only skip subtrees that it has not encountered yet.</p>
<h4 class="h4" id="ch5lev2sec21">PathMatcher</h4>
<p class="noindent"><code>DirectoryStream</code> and <code>FileVisitor</code> allowed us to go through the files that exist. Things can get complicated fast, though. Imagine you had a requirement to print out the names of all text files in any subdirectory of “password.” You might be wondering why anyone would want to do this. Maybe a teammate foolishly stored passwords for everyone to see and you want to make sure nobody else did that. You could write logic to keep track of the directory structure, but that makes the code harder to read and understand. By the end of this section, you’ll know a better way.</p>
<p class="indent">Let’s start out with a simpler example to see what a <code>PathMatcher</code> can do:</p>
<p class="imageip"><img src="images/un293-02.jpg" alt="Images" /></p>
<p class="noindent">which outputs:</p>
<p class="imageip"><img src="images/un293-03.jpg" alt="Images" /></p>
<p class="indent">We can see that the code checks if a <code>Path</code> consists of any characters followed by “.txt.” To get a <code>PathMatcher</code>, you have to call <code>FileSystems.getDefault().getPathMatcher</code> because matching works differently on <span id="page_294" epub:type="pagebreak"></span>different operating systems. <code>PathMatcher</code>s use a new type that you probably haven’t seen before called a glob. Globs are not regular expressions, although they might look similar at first. Let’s look at some more examples of globs using a common method so we don’t have to keep reading the same “boilerplate” code. (Boilerplate code is the part of the code that is always the same.)</p>
<p class="imageip"><img src="images/un294-01.jpg" alt="Images" /></p>
<p class="indent">In the world of globs, one asterisk means “match any character except for a directory boundary.” Two asterisks means “match any character, including a directory boundary.“</p>
<p class="imageip"><img src="images/un294-02.jpg" alt="Images" /></p>
<p class="text-icon"><img src="images/onjob.jpg" alt="Images" /></p>
<p class="text-icon1"><strong>Remember that we are using a file system–specific <strong><em>PathMatcher</em></strong>. This means slashes and backslashes can be treated differently, depending on what operating system you happen to be running. The previous example does print the same output on both Windows and UNIX because it uses forward slashes.However, if you change just one line of code, the output changes:</strong></p>
<p class="imageip"><img src="images/un294-03.jpg" alt="Images" /></p>
<p class="text-icon1"><strong>Now Windows still prints:</strong></p>
<p class="imageip"><img src="images/un294-04.jpg" alt="Images" /></p>
<p class="text-icon1"><strong>However, UNIX prints:</strong></p>
<p class="imageip"><img src="images/un294-05.jpg" alt="Images" /></p>
<p class="text-icon1"><strong>Why? Because UNIX doesn’t see the backslash as a directory boundary. The lesson here is to use <strong><em>/</em></strong> instead of <strong><em>\\</em></strong> so your code behaves more predictably across operating systems.</strong></p>
<p class="indent"><span id="page_295" epub:type="pagebreak"></span>Now let’s match files with a four-character extension. A question mark matches any character. A character could be a letter or a number or anything else.</p>
<p class="imageip"><img src="images/un295-01.jpg" alt="Images" /></p>
<p class="indent">Globs also provide a nice way to match multiple patterns. Suppose we want to match anything that begins with the names Kathy or Bert:</p>
<p class="imageip"><img src="images/un295-02.jpg" alt="Images" /></p>
<p class="indent">The first glob shows we can put wildcards inside braces to have multiple glob expressions. The second glob shows that we can put common wildcards outside the braces to share them. The third glob shows that without the wildcard, we will only match the literal strings “Bert” and “Kathy.“</p>
<p class="indent">You can also use sets of characters like <code>[a-z]</code> or <code>[#$%]</code> in globs just like in regular expressions. You can also escape special characters with a backslash. Let’s put this all together with a tricky example:</p>
<p class="imageip"><img src="images/un295-03.jpg" alt="Images" /></p>
<p class="indent">Spelling out what the glob does, we have the following:</p>
<p class="bullt"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>[0-9]</strong> One single digit. Can also be read as any one character from 0 to 9.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>\\*</strong> The literal character asterisk rather than the asterisk that means to match anything. A single backslash before <code>*</code> escapes it. However, Java won’t let you type a single backslash, so you have to escape the backslash itself with another backslash.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>{A*,b}</strong> Either a capital <em>A</em> followed by anything or the single character <em>b</em>.</p>
<p class="bull"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>/**/</strong> One or more directories with any name.</p>
<p class="bullb"><img class="inline" src="images/box.jpg" alt="Images" />   <strong>1</strong> The single character 1.</p>
<p class="indent"><span id="page_296" epub:type="pagebreak"></span>The second path doesn’t match because it has the literal backslash followed by the literal asterisk. The glob was looking for the literal asterisk by itself. The third path also doesn’t match because there is no literal asterisk. The fourth path doesn’t match because there is no directory between “<code>b</code>” and “<code>1</code>” for the <code>**</code> to match. Luckily, nobody would write such a crazy, meaningless glob. But if you can understand this one, you are all set. Globs tend to be simple expressions like <code>{*.txt,*.html}</code> when used for real.</p>
<p class="indent">Since globs are just similar enough to regular expressions to be tricky, <a href="ch5.xhtml#ch5tab9">Table 5-9</a> reviews the similarities and differences in common expressions. Regular expressions are more powerful, but globs focus on what you are likely to need when matching filenames.</p>
<p class="tabcap" id="ch5tab9"><span class="table"><strong>TABLE 5-9</strong></span> Glob vs. Regular Expression</p>
<p class="imaget"><img src="images/tab05-09.jpg" alt="Images" /></p>
<p class="indent">By now, you’ve probably noticed that we are dealing with <code>Path</code> objects, which means they don’t actually need to exist on the file system. But we wanted to print out all the text files that actually exist in a subdirectory of password. Luckily, we can combine the power of <code>PathMatcher</code>s with what we already know about walking the file tree to accomplish this.</p>
<p class="imageip"><img src="images/un296-01.jpg" alt="Images" /></p>
<p class="imageip"><span id="page_297" epub:type="pagebreak"></span><img src="images/un297-01.jpg" alt="Images" /></p>
<p class="indent">The code looks similar, regardless of what you want to do. You just change the glob pattern to what you actually want to match.</p>
<h4 class="h4" id="ch5lev2sec22">WatchService </h4>
<p class="indent">The last thing you need to know about in NIO.2 is <code>WatchService</code>. Suppose you are writing an installer program. You check that the directory you are about to install into is empty. If not, you want to wait until the user manually deletes that directory before continuing. Luckily, you won’t have to write this code from scratch, but you should be familiar with the concepts. Here’s the directory tree:</p>
<p class="imageip"><img src="images/un297-02.jpg" alt="Images" /></p>
<p class="noindent">Here’s the code snippet:</p>
<p class="imageip"><img src="images/un297-03.jpg" alt="Images" /></p>
<p class="imageip"><span id="page_298" epub:type="pagebreak"></span><img src="images/un298-01.jpg" alt="Images" /></p>
<p class="indent">Supposing we delete directory “<code>other</code>” followed by directory <code>directoryToDelete</code>, this outputs:</p>
<p class="imageip"><img src="images/un298-02.jpg" alt="Images" /></p>
<p class="noindent">Notice that we had to watch the directory that contains the files or directories we are interested in. This is why we watched <code>/dir</code> instead of <code>/dir/</code><code>directoryToDelete</code>. This is also why we had to check the context to make sure the directory we were actually interested in is the one that was deleted.</p>
<p class="indent">The basic flow of <code>WatchService</code> stays the same, regardless of what you want to do:</p>
<p class="numlistt">1.   Create a new <code>WatchService</code>.</p>
<p class="numlist">2.   Register it on a <code>Path</code> listening to one or more event types.</p>
<p class="numlist">3.   Loop until you are no longer interested in these events.</p>
<p class="numlist">4.   Get a <code>WatchKey</code> from the <code>WatchService</code>.</p>
<p class="numlist">5.   Call <code>key.pollEvents</code> and do something with the events.</p>
<p class="numlistb">6.   Call <code>key.reset</code> to look for more events.</p>
<p class="indent">Let’s look at some of these in more detail. You register the <code>WatchService</code> on a <code>Path</code> using statements like the following:</p>
<p class="imageip"><img src="images/un298-03.jpg" alt="Images" /></p>
<p class="noindent">(Note: These <code>ENTRY_XXX</code> constants can be found in the <code>StandardWatchEventKinds</code> class. Here and in later code, you’ll probably want to create static imports for these constants.) You can register one, two, or three of the event types. <code>ENTRY_DELETE</code> <span id="page_299" epub:type="pagebreak"></span>means you want your program to be informed when a file or directory has been deleted. Similarly, <code>ENTRY_CREATE</code> means a new file or directory has been created. <code>ENTRY_MODIFY</code> means a file has been edited in the directory. These changes can be made manually by a human or by another program on the computer.</p>
<p class="indent">Renaming a file or directory is interesting, as it does not show up as <code>ENTRY_MODIFY</code>. From Java’s point of view, a rename is equivalent to creating a new file and deleting the original. This means that two events will trigger for a rename—both <code>ENTRY_CREATE</code> and <code>ENTRY_DELETE</code>. Actually editing a file will show up as <code>ENTRY_MODIFY</code>.</p>
<p class="indent">To loop through the events, we use <code>while(true)</code>. It might seem a little odd to write a loop that never ends. Normally, there is a <code>break</code> or <code>return</code> statement in the loop so you stop looping once whatever event you were waiting for has occurred. It’s also possible you want the program to run until you kill or terminate it at the command line.</p>
<p class="indent">Within the loop, you need to get a <code>WatchKey</code>. There are two ways to do this. The most common is to call <code>take()</code>, which waits until an event is available. It throws an <code>InterruptedException</code> if it gets interrupted without finding a key. This allows you to end the program. The other way is to call <code>poll()</code>, which returns <code>null</code> if an event is not available. You can provide optional timeout parameters to wait up to a specific period of time for an event to show up.</p>
<p class="imageip"><img src="images/un299-01.jpg" alt="Images" /></p>
<p class="indent">Next, you loop through any events on that key. In the case of rename, you’ll get one key with two events—the <code>EVENT_CREATE</code> and <code>EVENT_DELETE</code>. Remember that you get all the events that happened since the last time you called <code>poll()</code>or <code>take()</code>. This means you can get multiple seemingly unrelated events out of the same key. They can be from different files but are for the same <code>WatchService</code>.</p>
<p class="imageip"><img src="images/un299-02.jpg" alt="Images" /></p>
<p class="indent">Finally, you call <code>key.reset()</code>. This is very important. If you forget to call reset, the program will work for the first event, but then you will not be notified of any other events.</p>
<p class="text-icon"><span id="page_300" epub:type="pagebreak"></span><img src="images/onjob.jpg" alt="Images" /></p>
<p class="text-icon1"><strong>There are a few limitations you should be aware of with <strong><em>WatchService</em></strong>. To begin with, it is slow. You could easily wait five seconds for the event to register. It also isn’t 100 percent reliable. You can add code to check whether <strong><em>kind == OVERFLOW</em></strong>, but that just tells you something went wrong. You don’t know what events you lost. In practice, you are unlikely to use <strong><em>WatchService</em></strong>.</strong></p>
<p class="indent"><code>WatchService</code> only watches the files and directories immediately beneath it. What if we want to watch to see if either <code>p.txt</code> or <code>c.txt</code> is modified?</p>
<p class="imageip"><img src="images/un300-01.jpg" alt="Images" /></p>
<p class="indent">One way is to register both directories:</p>
<p class="imageip"><img src="images/un300-02.jpg" alt="Images" /></p>
<p class="indent">This works. You can type in all the directories you want to watch. If we had a lot of child directories, this would quickly get to be too much work. Instead, we can have Java do it for us:</p>
<p class="imageip"><img src="images/un300-03.jpg" alt="Images" /></p>
<p class="indent">This code goes through the file tree recursively registering each directory with the watcher. The NIO.2 classes are designed to work together. For example, we could add <code>PathMatcher</code> to the previous example to only watch directories that have a specific pattern in their path.</p>
<h5 class="title-o"><span id="page_301" epub:type="pagebreak"></span><span class="white">CERTIFICATION OBJECTIVE</span></h5>
<h3 class="h3" id="ch5lev1sec5"><strong>Serialization (Objective 8.2)</strong></h3>
<p class="noindent"><em>8.2 Use BufferedReader, BufferedWriter, File, FileReader, FileWriter, FileInputStream, FileOutputStream, ObjectOutputStream, ObjectInputStream, and PrintWriter in the java.io package.</em></p>
<p class="indentt">Imagine you want to save the state of one or more objects. If Java didn’t have serialization (as the earliest version did not), you’d have to use one of the I/O classes to write out the state of the instance variables of all the objects you want to save. The worst part would be trying to reconstruct new objects that were virtually identical to the objects you were trying to save. You’d need your own protocol for the way in which you wrote and restored the state of each object, or you could end up setting variables with the wrong values. For example, imagine you stored an object that has instance variables for height and weight. At the time you save the state of the object, you could write out the height and weight as two <code>int</code>s in a file, but the order in which you write them is crucial. It would be all too easy to re-create the object but mix up the height and weight values—using the saved height as the value for the new object’s weight and vice versa.</p>
<p class="indent">Serialization lets you simply say “save this object and all of its instance variables.” Actually, it is a little more interesting than that because you can add, “...unless I’ve explicitly marked a variable as <code>transient</code>, which means, don’t include the transient variable’s value as part of the object’s serialized state.“</p>
<h4 class="h4" id="ch5lev2sec23">Working with ObjectOutputStream and ObjectInputStream</h4>
<p class="noindent">The magic of basic serialization happens with just two methods: one to serialize objects and write them to a stream, and a second to read the stream and deserialize objects.</p>
<p class="imageip"><img src="images/un301-01.jpg" alt="Images" /></p>
<p class="indent"><code>The</code> <code>java.io.ObjectOutputStream</code> and <code>java.io.ObjectInputStream</code> classes are considered to be <em>higher</em>-level classes in the java.io package, and as we learned earlier, that means you’ll wrap them around <em>lower</em>-level classes, such as <span id="page_302" epub:type="pagebreak"></span><code>java.io.FileOutputStream</code> and <code>java.io.FileInputStream</code>. Here’s a small program that creates a <code>Cat</code> object, serializes it, and then deserializes it:</p>
<p class="imageip"><img src="images/un302-01.jpg" alt="Images" /></p>
<p class="indent">Let’s take a look at the key points in this example:</p>
<p class="numlistt">1.   We declare that the <code>Cat</code> class implements the <code>Serializable</code> interface. <code>Serializable</code> is a marker interface; it has no methods to implement. (In the next several sections, we’ll cover various rules about when you need to declare classes <code>Serializable</code>.)</p>
<p class="numlist">2.   We make a new <code>Cat</code> object, which as we know is serializable.</p>
<p class="numlist">3.   We serialize the <code>Cat</code> object <code>c</code> by invoking the <code>writeObject()</code> method. It took a fair amount of preparation before we could actually serialize our <code>Cat</code>. First, we had to put all of our I/O-related code in a try/catch block. Next, we had to create a <code>FileOutputStream</code> to write the object to. Then, we wrapped the <code>FileOutputStream</code> in an <code>ObjectOutputStream</code>, which is the class that has the magic serialization method that we need. Remember that the invocation of <code>writeObject()</code> performs two tasks: it serializes the object, and then it writes the serialized object to a file.</p>
<p class="numlistb">4.   We de-serialize the <code>Cat</code> object by invoking the <code>readObject()</code> method. The <code>readObject()</code> method returns an <code>Object</code>, so we have to cast the deserialized object back to a <code>Cat</code>. Again, we had to go through the typical I/O hoops to set this up.</p>
<p class="indent"><span id="page_303" epub:type="pagebreak"></span>This is a bare-bones example of serialization in action. Over the next few pages, we’ll look at some of the more complex issues that are associated with serialization.</p>
<h4 class="h4" id="ch5lev2sec24">Object Graphs</h4>
<p class="noindent">What does it really mean to save an object? If the instance variables are all primitive types, it’s pretty straightforward. But what if the instance variables are themselves references to <em>objects</em>? What gets saved? Clearly in Java it wouldn’t make any sense to save the actual value of a reference variable, because the value of a Java reference has meaning only within the context of a single instance of a JVM. In other words, if you tried to restore the object in another instance of the JVM, even running on the same computer on which the object was originally serialized, the reference would be useless.</p>
<p class="indent">But what about the object that the reference refers to? Look at this class:</p>
<p class="imageip"><img src="images/un303-01.jpg" alt="Images" /></p>
<p class="indent">Now make a dog... First, you make a <code>Collar</code> for the <code>Dog</code>:</p>
<p class="imageip"><img src="images/un303-02.jpg" alt="Images" /></p>
<p class="noindent">Then make a new <code>Dog</code>, passing it the <code>Collar</code>:</p>
<p class="imageip"><img src="images/un303-03.jpg" alt="Images" /></p>
<p class="indent">Now what happens if you save the <code>Dog</code>? If the goal is to save and then restore a <code>Dog</code>, and the restored <code>Dog</code> is an exact duplicate of the <code>Dog</code> that was saved, then the <code>Dog</code> needs a <code>Collar</code> that is an exact duplicate of the <code>Dog</code>’s <code>Collar</code> at the time the <code>Dog</code> was saved. That means both the <code>Dog</code> and the <code>Collar</code> should be saved.</p>
<p class="indent"><span id="page_304" epub:type="pagebreak"></span>And what if the <code>Collar</code> itself had references to other objects—perhaps a <code>Color</code> object? This gets quite complicated very quickly. If it were up to the programmer to know the internal structure of each object the <code>Dog</code> referred to, so that the programmer could be sure to save all the state of all those objects…whew. That would be a nightmare with even the simplest of objects.</p>
<p class="indent">Fortunately, the Java serialization mechanism takes care of all of this. When you serialize an object, Java serialization takes care of saving that object’s entire “object graph.” That means a deep copy of everything the saved object needs to be restored. For example, if you serialize a <code>Dog</code> object, the <code>Collar</code> will be serialized automatically. And if the <code>Collar</code> class contained a reference to another object, <em>that</em> object would also be serialized, and so on. And the only object you have to worry about saving and restoring is the <code>Dog</code>. The other objects required to fully reconstruct that <code>Dog</code> are saved (and restored) automatically through serialization.</p>
<p class="indent">Remember, you do have to make a conscious choice to create objects that are serializable by implementing the <code>Serializable</code> interface. If we want to save <code>Dog</code> objects, for example, we’ll have to modify the <code>Dog</code> class as follows:</p>
<p class="imageip"><img src="images/un304-01.jpg" alt="Images" /></p>
<p class="noindent">And now we can save the <code>Dog</code> with the following code:</p>
<p class="imageip"><img src="images/un304-02.jpg" alt="Images" /></p>
<p class="indent">But when we run this code we get a runtime exception, something like this</p>
<p class="imageip"><img src="images/un304-03.jpg" alt="Images" /></p>
<p class="noindent">What did we forget? The <code>Collar</code> class must <em>also</em> be <code>Serializable</code>. If we modify the <code>Collar</code> class and make it serializable, then there’s no problem:</p>
<p class="imageip"><img src="images/un304-04.jpg" alt="Images" /></p>
<p class="indent"><span id="page_305" epub:type="pagebreak"></span>Here’s the complete listing:</p>
<p class="imageip"><img src="images/un305-01.jpg" alt="Images" /></p>
<p class="noindent">This produces the output:</p>
<p class="imageip"><img src="images/un305-02.jpg" alt="Images" /></p>
<p class="indent">But what would happen if we didn’t have access to the <code>Collar</code> class source code? In other words, what if making the <code>Collar</code> class serializable was not an option? Are we stuck with a non-serializable <code>Dog</code>?</p>
<p class="indent"><span id="page_306" epub:type="pagebreak"></span>Obviously, we could subclass the <code>Collar</code> class, mark the subclass as <code>Serializable</code>, and then use the <code>Collar</code> subclass instead of the <code>Collar</code> class. But that’s not always an option either for several potential reasons:</p>
<p class="numlistt">1.   The <code>Collar</code> class might be final, preventing subclassing.</p>
<p class="nump">OR</p>
<p class="numlist">2.   The <code>Collar</code> class might itself refer to other non-serializable objects, and without knowing the internal structure of <code>Collar</code>, you aren’t able to make all these fixes (assuming you even wanted to <em>try</em> to go down that road).</p>
<p class="nump">OR</p>
<p class="numlistb">3.   Subclassing is not an option for other reasons related to your design.</p>
<p class="indent">So…<em>then</em> what do you do if you want to save a Dog?</p>
<p class="indent">That’s where the <code>transient</code> modifier comes in. If you mark the <code>Dog</code>’s <code>Collar</code> instance variable with <code>transient</code>, then serialization will simply skip the <code>Collar</code> during serialization:</p>
<p class="imageip"><img src="images/un306-01.jpg" alt="Images" /></p>
<p class="indent">Now we have a <code>Serializable</code> <code>Dog</code>, with a non-<code>Serializable</code> <code>Collar</code>, but the <code>Dog</code> has marked the <code>Collar</code> <code>transient</code>; the output is</p>
<p class="imageip"><img src="images/un306-02.jpg" alt="Images" /></p>
<p class="indent">So now what can we do?</p>
<h4 class="h4" id="ch5lev2sec25">Using writeObject and readObject</h4>
<p class="noindent">Consider the problem: we have a <code>Dog</code> object we want to save. The <code>Dog</code> has a <code>Collar</code>, and the <code>Collar</code> has state that should also be saved as part of the <code>Dog</code>’s state. But…the <code>Collar</code> is not <code>Serializable</code>, so we must mark it <code>transient</code>. That means when the <code>Dog</code> is deserialized, it comes back with a null <code>Collar</code>. What can we do to somehow make sure that when the <code>Dog</code> is deserialized, it gets a new <code>Collar</code> that matches the one the <code>Dog</code> had when the <code>Dog</code> was saved?</p>
<p class="indent"><span id="page_307" epub:type="pagebreak"></span>Java serialization has a special mechanism just for this—a set of private methods you can implement in your class that, if present, will be invoked automatically during serialization and deserialization. It’s almost as if the methods were defined in the <code>Serializable</code> interface, except they aren’t. They are part of a special callback contract the serialization system offers you that basically says, “If you (the programmer) have a pair of methods matching this exact signature (you’ll see them in a moment), these methods will be called during the serialization/deserialization process.</p>
<p class="indent">These methods let you step into the middle of serialization and deserialization. So they’re perfect for letting you solve the <code>Dog</code>/<code>Collar</code> problem: when a <code>Dog</code> is being saved, you can step into the middle of serialization and say, “By the way, I’d like to add the state of the <code>Collar</code>’s variable (an <code>int</code>) to the stream when the <code>Dog</code> is serialized.” You’ve manually added the state of the <code>Collar</code> to the <code>Dog</code>’s serialized representation, even though the <code>Collar</code> itself is not saved.</p>
<p class="indent">Of course, you’ll need to restore the <code>Collar</code> during deserialization by stepping into the middle and saying, “I’ll read that extra <code>int</code> I saved to the <code>Dog</code> stream, and use it to create a new <code>Collar</code>, and then assign that new <code>Collar</code> to the <code>Dog</code> that’s being deserialized.” The two special methods you define must have signatures that look <em>exactly</em> like this:</p>
<p class="imageip"><img src="images/un307-01.jpg" alt="Images" /></p>
<p class="indent">Yes, we’re going to write methods that have the same name as the ones we’ve been calling! Where do these methods go? Let’s change the <code>Dog</code> class:</p>
<p class="imageip"><img src="images/un307-02.jpg" alt="Images" /></p>
<p class="imageip"><span id="page_308" epub:type="pagebreak"></span><img src="images/un308-01.jpg" alt="Images" /></p>
<p class="indent">In our scenario we’ve agreed that, for whatever real-world reason, we can’t serialize a <code>Collar</code> object, but we want to serialize a <code>Dog</code>. To do this we’re going to implement <code>writeObject()</code> and <code>readObject()</code>. By implementing these two methods you’re saying to the compiler: “If anyone invokes <code>writeObject()</code> or <code>readObject()</code> concerning a <code>Dog</code> object, use this code as part of the read and write.“</p>
<p class="indent">Let’s take a look at the preceding code.</p>
<p class="numlistt">1.   Like most I/O-related methods <code>writeObject()</code> can throw exceptions. You can declare them or handle them, but we recommend handling them.</p>
<p class="numlist">2.   When you invoke <code>defaultWriteObject()</code> from within <code>writeObject()</code>, you’re telling the JVM to do the normal serialization process for this object. When implementing <code>writeObject()</code>, you will typically request the normal serialization process <em>and</em> do some custom writing and reading, too. </p>
<p class="numlist">3.   In this case, we decided to write an extra <code>int</code> (the collar size) to the stream that’s creating the serialized <code>Dog</code>. You can write extra stuff before and/or after you invoke <code>defaultWriteObject()</code>. But…when you read it back in, you have to read the extra stuff in the same order you wrote it. </p>
<p class="numlist">4.   Again, we chose to handle rather than declare the exceptions.</p>
<p class="numlist">5.   When it’s time to deserialize, <code>defaultReadObject()</code> handles the normal deserialization you’d get if you didn’t implement a <code>readObject()</code> method.</p>
<p class="numlistb">6.   Finally, we build a new <code>Collar</code> object for the <code>Dog</code> using the collar size that we manually serialized. (We had to invoke <code>readInt()</code> <em>after</em> we invoked <code>defaultReadObject()</code> or the streamed data would be out of sync!)</p>
<p class="indent">Remember, the most common reason to implement <code>writeObject()</code> and <code>readObject()</code> is when you have to save some part of an object’s state manually. If you choose, you can write and read <em>all</em> of the state yourself, but that’s very rare. <span id="page_309" epub:type="pagebreak"></span>So, when you want to do only a <em>part</em> of the serialization/deserialization yourself, you <em>must</em> invoke the <code>defaultReadObject()</code> and <code>defaultWriteObject()</code> methods to do the rest. </p>
<p class="indent">Which brings up another question—why wouldn’t <em>all</em> Java classes be serializable? Why isn’t class <code>Object</code> serializable? There are some things in Java that simply cannot be serialized because they are runtime specific. Things like streams, threads, runtime, etc., and even some GUI classes (which are connected to the underlying OS) cannot be serialized. What is and is not serializable in the Java API is <em>not</em> part of the exam, but you’ll need to keep them in mind if you’re serializing complex objects.</p>
<h4 class="h4" id="ch5lev2sec26">How Inheritance Affects Serialization</h4>
<p class="noindent">Serialization is very cool, but in order to apply it effectively you’re going to have to understand how your class’s superclasses affect serialization.</p>
<div class="side">
<p class="exam"><img src="images/exam.jpg" alt="Images" /></p>
</div>
<div class="side1">
<p class="indent"><strong><em>If a superclass is <code>Serializable</code>, then, according to normal Java interface rules, all subclasses of that class automatically implement <code>Serializable</code> implicitly. In other words, a subclass of a class marked <code>Serializable</code> passes the IS-A test for <code>Serializable</code> and thus can be saved without having to explicitly mark the subclass as <code>Serializable</code>. You simply cannot tell whether a class is or is not <code>Serializable</code> unless you can see the class inheritance tree to see whether any other superclasses implement <code>Serializable</code>. If the class does not explicitly extend any other class and does not implement <code>Serializable</code>, then you know for certain that the class is not <code>Serializable,</code> because class <code>Object</code> does not implement <code>Serializable</code>.</em></strong></p>
</div>
<p class="indent">That brings up another key issue with serialization…what happens if a superclass is not marked <code>Serializable</code>, but the subclass is? Can the subclass still be serialized even if its superclass does not implement <code>Serializable</code>? Imagine this:</p>
<p class="imageip"><img src="images/un309-01.jpg" alt="Images" /></p>
<p class="indent">Now you have a <code>Serializable</code> <code>Dog</code> class with a non-<code>Serializable</code> superclass. This works! But there are potentially serious implications. To fully <span id="page_310" epub:type="pagebreak"></span>understand those implications, let’s step back and look at the difference between an object that comes from deserialization versus an object created using <code>new</code>. Remember, when an object is constructed using <code>new</code> (as opposed to being deserialized), the following things happen (in this order):</p>
<p class="numlistt">1.   All instance variables are assigned default values.</p>
<p class="numlist">2.   The constructor is invoked, which immediately invokes the superclass constructor (or another overloaded constructor, until one of the overloaded constructors invokes the superclass constructor).</p>
<p class="numlist">3.   All superclass constructors complete.</p>
<p class="numlist">4.   Instance variables that are initialized as part of their declaration are assigned their initial value (as opposed to the default values they’re given prior to the superclass constructors completing).</p>
<p class="numlistb">5.   The constructor completes.</p>
<p class="indent"><em>But these things do not happen when an object is deserialized.</em> When an instance of a serializable class is deserialized, the constructor does not run and instance variables are not given their initially assigned values! Think about it—if the constructor were invoked and/or instance variables were assigned the values given in their declarations, the object you’re trying to restore would revert back to its original state, rather than coming back reflecting the changes in its state that happened sometime after it was created. For example, imagine you have a class that declares an instance variable and assigns it the <code>int</code> value <code>3</code> and includes a method that changes the instance variable value to <code>10</code>:</p>
<p class="imageip"><img src="images/un310-01.jpg" alt="Images" /></p>
<p class="indent">Obviously, if you serialize a <code>Foo</code> instance <em>after</em> the <code>changeNum()</code> method runs, the value of the <code>num</code> variable should be <code>10</code>. When the <code>Foo</code> instance is deserialized, you want the <code>num</code> variable to still be <code>10</code>! You obviously don’t want the initialization (in this case, the assignment of the value <code>3</code> to the variable <code>num</code>) to happen. Think of constructors and instance variable assignments together as part of one complete object initialization process (and, in fact, they do become one initialization method in the bytecode). The point is, when an object is deserialized we do not want any of the normal initialization to happen. We don’t want the constructor to run, and we don’t want the explicitly declared values to be assigned. We want only the values saved as part of the serialized state of the object to be reassigned.</p>
<p class="indent"><span id="page_311" epub:type="pagebreak"></span>Of course, if you have variables marked <code>transient</code>, they will not be restored to their original state (unless you implement <code>readObject()</code>), but will instead be given the default value for that data type. In other words, even if you say</p>
<p class="imageip"><img src="images/un311-01.jpg" alt="Images" /></p>
<p class="noindent">when the <code>Bar</code> instance is deserialized, the variable <code>x</code> will be set to a value of <code>0</code>. Object references marked <code>transient</code> will always be reset to <code>null</code>, regardless of whether they were initialized at the time of declaration in the class.</p>
<p class="indent">So, that’s what happens when the object is deserialized, and the class of the serialized object directly extends <code>Object</code>, or has only serializable classes in its inheritance tree. It gets a little trickier when the serializable class has one or more non-serializable superclasses. </p>
<p class="indent">Getting back to our non-serializable <code>Animal</code> class with a serializable <code>Dog</code> subclass example:</p>
<p class="imageip"><img src="images/un311-02.jpg" alt="Images" /></p>
<p class="noindent">Because <code>Animal</code> is not serializable, any state maintained in the <code>Animal</code> class, even though the state variable is inherited by the <code>Dog</code>, isn’t going to be restored with the <code>Dog</code> when it’s deserialized! The reason is, the (unserialized) <code>Animal</code> part of the <code>Dog</code> is going to be reinitialized, just as it would be if you were making a new <code>Dog</code> (as opposed to deserializing one). That means all the things that happen to an object during construction will happen—but only to the <code>Animal</code> parts of a <code>Dog</code>. In other words, the instance variables from the <code>Dog</code>’s class will be serialized and deserialized correctly, but the inherited variables from the non-serializable <code>Animal</code> superclass will come back with their default/initially assigned values rather than the values they had at the time of serialization.</p>
<p class="indent">If you are a serializable class but your superclass is <em>not</em> serializable, then any instance variables you inherit from that superclass will be reset to the values they were given during the original construction of the object. This is because the non-serializable class constructor <em>will</em> run!</p>
<p class="indent">In fact, every constructor above the first non-serializable class constructor will also run, no matter what, because once the first super constructor is invoked (during deserialization), it, of course, invokes its super constructor and so on, up the inheritance tree.</p>
<p class="indent">For the exam, you’ll need to be able to recognize which variables will and will not be restored with the appropriate values when an object is deserialized, so be sure to study the following code example and the output:</p>
<p class="imageip"><span id="page_312" epub:type="pagebreak"></span><img src="images/un312-01.jpg" alt="Images" /></p>
<p class="noindent">which produces the output:</p>
<p class="imageip"><img src="images/un312-02.jpg" alt="Images" /></p>
<p class="indent">The key here is that because <code>Animal</code> is not serializable, when the <code>Dog</code> was deserialized, the <code>Animal</code> constructor ran and reset the <code>Dog</code>’s inherited weight variable.</p>
<div class="side">
<p class="exam"><img src="images/exam.jpg" alt="Images" /></p>
</div>
<div class="side1">
<p class="indent"><strong><em>If you serialize a collection or an array, every element must be serializable! A single non-serializable element will cause serialization to fail. Note also that although the collection interfaces are not serializable, the concrete collection classes in the Java API are.</em></strong></p>
</div>
<h4 class="h4" id="ch5lev2sec27"><span id="page_313" epub:type="pagebreak"></span>Serialization Is Not for Statics</h4>
<p class="noindent">Finally, you might have noticed that we’ve talked only about instance variables, not static variables. Should static variables be saved as part of the object’s state? Isn’t the state of a static variable at the time an object was serialized important? Yes and no. It might be important, but it isn’t part of the instance’s state at all. Remember, you should think of static variables purely as <em>class</em> variables. They have nothing to do with individual instances. But serialization applies only to <em>objects</em>. And what happens if you deserialize three different <code>Dog</code> instances, all of which were serialized at different times and all of which were saved when the value of a static variable in class <code>Dog</code> was different? Which instance would “win”? Which instance’s static value would be used to replace the one currently in the one and only <code>Dog</code> class that’s currently loaded? See the problem?</p>
<p class="indent">Static variables are <em>never</em> saved as part of the object’s state…because they do not belong to the object!</p>
<p class="text-icon"><img src="images/onjob.jpg" alt="Images" /></p>
<p class="text-icon1"><strong>As simple as serialization code is to write, versioning problems can occur in the real world. If you save a <strong><em>Dog</em></strong> object using one version of the class, but attempt to deserialize it using a newer different version of the class, deserialization might fail. See the Java API for details about versioning issues and solutions.</strong></p>
<h3 class="h3" id="ch5lev1sec6">CERTIFICATION SUMMARY</h3>
<hr/>
<p class="noindentt"><strong>File I/O</strong> Remember that objects of type <code>File</code> can represent either files or directories, but that until you call <code>createNewFile()</code> or <code>mkdir()</code>, you haven’t actually created anything on your hard drive. Classes in the <code>java.io</code> package are designed to be chained together. You will rarely use a <code>FileReader</code> or a <code>FileWriter</code> without “wrapping” them with a <code>BufferedReader</code> or <code>BufferedWriter</code> object, which gives <span id="page_314" epub:type="pagebreak"></span>you access to more powerful, higher-level methods. As of Java 5, the <code>PrintWriter</code> class has been enhanced with advanced <code>append()</code>, <code>format()</code>, and <code>printf()</code> methods, and when you couple that with new constructors that allow you to create <code>PrintWriter</code>s directly from a <code>String</code> name or a <code>File</code> object, you may use <code>BufferedWriters</code> a lot less. The <code>Console</code> class allows you to read nonechoed input (returned in a <code>char[?]</code>) and is instantiated using <code>System.console()</code>.</p>
<p class="indent">NIO.2 objects of type <code>Path</code> can be files or directories and are a replacement of type <code>File</code>. <code>Paths</code> are created with <code>Paths.get()</code>. Utility methods in <code>Files</code> allow you to create, delete, move, copy, or check information about a <code>Path</code>. In addition, <code>BasicFileAttributes</code>, <code>DosFileAttributes</code> (Windows), and <code>PosixFileAttributes</code> (UNIX/Linux/Mac) allow you to check more advanced information about a <code>Path</code>. <code>BasicFileAttributeView</code>, <code>DosFileAttributeView</code>, and <code>PosixFileAttributeView</code> allow you to update advanced <code>Path</code> attributes.</p>
<p class="indent">Using a <code>DirectoryStream</code> allows you to iterate through a directory. Extending <code>SimpleFileVisitor</code> lets you walk a directory tree recursively looking at files and/or directories. With a <code>PathMatcher</code>, you can search directories for files using regex-esqu expressions called globs.</p>
<p class="indent">Finally, registering a <code>WatchService</code> provides notifications for new/changed/removed files or directories.</p>
<p class="noindentt"><strong>Serialization</strong> Serialization lets you save, ship, and restore everything you need to know about a <em>live</em> object. And when your object points to other objects, they get saved too. The <code>java.io.ObjectOutputStream</code> and <code>java.io.ObjectInputStream</code> classes are used to serialize and deserialize objects. Typically, you wrap them around instances of <code>FileOutputStream</code> and <code>FileInputStream</code>, respectively.</p>
<p class="indent">The key method you invoke to serialize an object is <code>writeObject()</code>, and to deserialize an object invoke <code>readObject()</code>. In order to serialize an object, it must implement the <code>Serializable</code> interface. Mark instance variables <code>transient</code> if you don’t want their state to be part of the serialization process. You can augment the serialization process for your class by implementing <code>writeObject()</code> and <code>readObject()</code>. If you do that, an embedded call to <code>defaultReadObject()</code> and <code>defaultWriteObject()</code> will handle the normal serialization tasks, and you can augment those invocations with manual <em>reading from</em> and <em>writing to</em> the stream.</p>
<p class="indent">If a superclass implements <code>Serializable</code> then all of its subclasses do too. If a superclass doesn’t implement <code>Serializable</code>, then when a subclass object is deserialized, the unserializable superclass’s constructor runs—be careful! Finally, remember that serialization is about instances, so static variables aren’t serialized.</p>
<h3 class="h3b" id="ch5lev1sec7"><span id="page_315" epub:type="pagebreak"></span><img src="images/tick1.jpg" alt="Images" />TWO-MINUTE DRILL</h3>
<p class="noindent">Here are some of the key points from the certification objectives in this chapter.</p>
<h4 class="h4">File I/O (OCP Objectives 8.1 and 8.2)</h4>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  The classes you need to understand in <code>java.io</code> are <code>File</code>, <code>FileReader</code>, <code>BufferedReader</code>, <code>FileWriter</code>, <code>BufferedWriter</code>, <code>PrintWriter</code>, and <code>Console</code>.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  A new <code>File</code> object doesn’t mean there’s a new file on your hard drive.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  <code>F</code><code>ile</code> objects can represent either a file or a directory.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  The <code>File</code> class lets you manage (add, rename, and delete) files and directories.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  The methods <code>createNewFile()</code> and <code>mkdir()</code> add entries to your file system.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  <code>F</code><code>ileWriter</code> and <code>FileReader</code> are low-level I/O classes. You can use them to write and read files, but they should usually be wrapped.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  <code>F</code><code>ileOutputStream</code> and <code>FileInputStream</code> are low-level I/O classes. You can use them to write and read bytes to and from files, but they should usually be wrapped.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  Classes in <code>java.io</code> are designed to be “chained” or “wrapped.” (This is a common use of the decorator design pattern.)</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  It’s very common to “wrap” a <code>BufferedReader</code> around a <code>FileReader</code> or a <code>BufferedWriter</code> around a <code>FileWriter</code> to get access to higher-level (more convenient) methods.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  <code>P</code><code>rintWriter</code>s can be used to wrap other <code>Writers</code>, but as of Java 5, they can be built directly from <code>File</code>s or <code>String</code>s.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  As of Java 5, <code>PrintWriter</code>s have <code>append()</code>, <code>format()</code>, and <code>printf()</code> methods.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  <code>C</code><code>onsole</code> objects can read nonechoed input and are instantiated using <code>System.console()</code>.</p>
<h4 class="h4">Path, Paths, File, and Files (OCP Objectives 9.1 and 9.2)</h4>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  NIO.2 was introduced in Java 7.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  <code>Path</code> replaces <code>File</code> for a representation of a file or directory.</p>
<p class="bull-image"><span id="page_316" epub:type="pagebreak"></span><img class="inline" src="images/box1.jpg" alt="Images" />  <code>Paths.get()</code> lets you create a <code>Path</code> object.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  Static methods in <code>Files</code> let you work with <code>Path</code> objects.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  A <code>Path</code> object doesn’t mean the file or directory exists on your hard drive.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  The methods <code>Files.createFile()</code> and <code>Files.createDirectory()</code> add entries to your file system.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  The <code>Files</code> class provides methods to move, copy, and delete <code>Path</code> objects.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  <code>Files.delete()</code> throws an exception and <code>Files.deleteIfExists()</code> returns false if the file does not exist.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  On <code>Path</code>, <code>normalize()</code> simplifies the path representation.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  On <code>Path</code>, <code>resolve()</code> and <code>relativize()</code>work with the relationship between two path objects.</p>
<h4 class="h4">File Attributes (OCP Objective 9.2)</h4>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  The <code>Files</code> class provides methods for common attributes, such as whether the file is executable and when it was last modified.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  For less common attributes the classes <code>BasicFileAttributes</code>, <code>DosFileAttributes</code>, and <code>PosixFileAttributes</code> read the attributes.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  <code>DosFileAttributes</code> works on Windows operating systems.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  <code>PosixFileAttributes</code> works on UNIX, Linux, and Mac operating systems.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  Attributes that can’t be updated via the <code>Files</code> class are set using these classes: <code>BasicFileAttributeView</code>, <code>DosFileAttributeView</code>, <code>PosixFileAttributeView</code>, <code>FileOwnerAttributeView</code>, and <code>AclFileAttributeView</code>.</p>
<h4 class="h4">Directory Trees, Matching, and Watching for Changes (OCP Objective 9.2)</h4>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  <code>DirectoryStream</code> iterates through immediate children of a directory using glob patterns.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  <code>FileVisitor</code> walks recursively through a directory tree.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  You can override one or all of the methods of <code>SimpleFileVisitor</code>—<code>preVisitDirectory</code>, <code>visitFile</code>, <code>visitFileFailed</code>, and <code>postVisitDirectory</code>.</p>
<p class="bull-image"><span id="page_317" epub:type="pagebreak"></span><img class="inline" src="images/box1.jpg" alt="Images" />  You can change the flow of a file visitor by returning one of the <code>FileVisitResult</code> constants: CONTINUE, SKIP_SUBTREE, SKIP_SIBLINGS, or TERMINATE.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  <code>PathMatcher</code> checks if a path matches a glob pattern.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  Know what the following expressions mean for globs: <code>*</code>, <code>**</code>, <code>?</code>, and <code>{a,b}</code>.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  Directories register with <code>WatchService</code> to be notified about creation, deletion, and modification of files or immediate subdirectories.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  <code>PathMatcher</code> and <code>WatchService</code> use <code>FileSystems</code>-specific implementations.</p>
<h4 class="h4">Serialization (Objective 8.2)</h4>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  The classes you need to understand are all in the <code>java.io</code> package; they include <code>ObjectOutputStream</code> and <code>ObjectInputStream</code>, primarily, and <code>FileOutputStream</code> and <code>FileInputStream</code> because you will use them to create the low-level streams that the <code>ObjectXxxStream</code> classes will use.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  A class must implement <code>Serializable</code> before its objects can be serialized.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  The <code>ObjectOutputStream.writeObject()</code> method serializes objects, and the <code>ObjectInputStream.readObject()</code> method deserializes objects.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  If you mark an instance variable <code>transient</code>, it will not be serialized even though the rest of the object’s state will be.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  You can supplement a class’s automatic serialization process by implementing the <code>writeObject()</code> and <code>readObject()</code> methods. If you do this, embedding calls to <code>defaultWriteObject()</code> and <code>defaultReadObject()</code>, respectively, will handle the part of serialization that happens normally.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  If a superclass implements <code>Serializable</code>, then its subclasses do automatically.</p>
<p class="bull-image"><img class="inline" src="images/box1.jpg" alt="Images" />  If a superclass doesn’t implement <code>Serializable</code>, then, when a subclass object is deserialized, the superclass constructor will be invoked along with its superconstructor(s).</p>
<h3 class="h3b" id="ch5lev1sec8"><img src="images/qs.jpg" alt="Images" /> SELF TEST</h3>
<p class="noindentb">The following questions will help you measure your understanding of the material presented in this chapter. Read all of the choices carefully, as there may be more than one correct answer. Choose all correct answers for each question. Stay focused.</p>
<p class="que"><strong><a id="ch5ans1" href="ch5.xhtml#r_ch5ans1">1</a>.</strong>   Note: The use of “drag-and-drop” questions has come and gone over the years. In case Oracle brings them back into fashion, we threw a couple of them in the book.<br/>Using the fewest fragments possible (and filling the fewest slots possible), complete the following code so that the class builds a directory named “<code>dir3</code>” and creates a file named “<code>file3</code>” inside “<code>dir3</code>.” Note you can use each fragment either zero or one times.</p>
<p class="quep">Code:</p>
<p class="imageqp"><span id="page_318" epub:type="pagebreak"></span><img src="images/un318-01.jpg" alt="Images" /></p>
<p class="quea">Fragments:</p>
<p class="imageqp"><img src="images/un318-02.jpg" alt="Images" /></p>
<p class="que"><strong><a id="ch5ans2" href="ch5.xhtml#r_ch5ans2">2</a>.</strong>   Given:</p>
<p class="imageqp"><span id="page_319" epub:type="pagebreak"></span><img src="images/un319-01.jpg" alt="Images" /></p>
<p class="quep">and that the invocation</p>
<p class="imagebp"><img src="images/un319-02.jpg" alt="Images" /></p>
<p class="quep">is issued from a directory that has two subdirectories, “<code>dir1</code>” and “<code>dir2</code>,” and that “<code>dir1</code>” has a file “<code>file1.txt</code>” and “<code>dir2</code>” has a file “<code>file2.txt</code>,” and the output is “<code>false true</code>,” which set(s) of code fragments must be inserted? (Choose all that apply.)</p>
<p class="quep"><img src="images/un319-03.jpg" alt="Images" /></p>
<p class="que"><strong><a id="ch5ans3" href="ch5.xhtml#r_ch5ans3">3</a>.</strong>   Given:</p>
<p class="imageqp"><img src="images/un319-04.jpg" alt="Images" /></p>
<p class="quep">And given that <code>myfile.txt</code> contains the following two lines of data:</p>
<p class="imageqp"><span id="page_320" epub:type="pagebreak"></span><img src="images/un320-04.jpg" alt="Images" /></p>
<p class="quep">What is the result?</p>
<p class="quep"><img src="images/un320-03.jpg" alt="Images" /></p>
<p class="que"><strong><a id="ch5ans4" href="ch5.xhtml#r_ch5ans4">4</a>.</strong>   Given:</p>
<p class="imageqp"><img src="images/un320-01.jpg" alt="Images" /></p>
<p class="quep">If line 4 creates a valid <code>Console</code> object and if the user enters <em>fred</em> as a username and <em>1234</em> as a password, what is the result? (Choose all that apply.)</p>
<p class="quep"><img src="images/un320-02.jpg" alt="Images" /></p>
<p class="quep">E.   An exception is thrown at runtime</p>
<p class="que"><strong><a id="ch5ans5" href="ch5.xhtml#r_ch5ans5">5</a>.</strong>   Given:</p>
<p class="imageqp"><span id="page_321" epub:type="pagebreak"></span><img src="images/un321-01.jpg" alt="Images" /></p>
<p class="quep">Instances of which class(es) can be serialized? (Choose all that apply.)</p>
<p class="alpha">A.   <code>Car</code></p>
<p class="alpha">B.   <code>Ford</code></p>
<p class="alpha">C.   <code>Dodge</code></p>
<p class="alpha">D.   <code>Wheels</code></p>
<p class="alpha">E.   <code>Vehicle</code></p>
<p class="que"><strong><a id="ch5ans6" href="ch5.xhtml#r_ch5ans6">6</a>.</strong>   Which of the following creates a <code>Path</code> object pointing to <code>c:/temp/exam</code>? (Choose all that apply.)</p>
<p class="alpha">A.   <code>new Path("c:/temp/exam")</code></p>
<p class="alpha">B.   <code>new Path("c:/temp", "exam")</code></p>
<p class="alpha">C.   <code>Files.get("c:/temp/exam")</code></p>
<p class="alpha">D.   <code>Files.get("c:/temp", "exam")</code></p>
<p class="alpha">E.   <code>Paths.get("c:/temp/exam")</code></p>
<p class="alpha">F.   <code>Paths.get("c:/temp", "exam")</code></p>
<p class="que"><strong><a id="ch5ans7" href="ch5.xhtml#r_ch5ans7">7</a>.</strong>   Given a directory tree at the root of the C: drive and the fact that no other files exist:</p>
<p class="imageqp"><img src="images/un321-03.jpg" alt="Images" /></p>
<p class="quep">and these two paths:</p>
<p class="imageqp"><img src="images/un321-04.jpg" alt="Images" /></p>
<p class="quep">Which of the following statements prints out: <code>y/a</code>?</p>
<p class="alpha">A.   <code>System.out.println(one.relativize(two));</code></p>
<p class="alpha">B.   <code>System.out.println(two.relativize(one));</code></p>
<p class="alpha">C.   <code>System.out.println(one.resolve(two));</code></p>
<p class="alpha">D.   <code>System.out.println(two.resolve(one));</code></p>
<p class="alpha">E.   <code>System.out.println(two.resolve(two));</code></p>
<p class="alpha">F.   None of the above</p>
<p class="que"><strong><a id="ch5ans8" href="ch5.xhtml#r_ch5ans8">8</a>.</strong>   Given the following statements:</p>
<p class="romani">I.   A nonempty directory can usually be deleted using <code>Files.delete</code></p>
<p class="romanii">II.   A nonempty directory can usually be moved using <code>Files.move</code></p>
<p class="romaniii">III.   A nonempty directory can usually be <br/>copied using <code>Files.copy</code></p>
<p class="quep">Which of the following is true?</p>
<p class="alpha">A.   I only</p>
<p class="alpha">B.   II only</p>
<p class="alpha">C.   III only</p>
<p class="alpha">D.   I and II only</p>
<p class="alpha">E.   II and III only</p>
<p class="alpha">F.   I and III only</p>
<p class="alpha">G.   I, II, and III</p>
<p class="que"><strong><a id="ch5ans9" href="ch5.xhtml#r_ch5ans9">9</a>.</strong>   Given:</p>
<p class="imageqp"><span id="page_322" epub:type="pagebreak"></span><img src="images/un322-01.jpg" alt="Images" /></p>
<p class="quep">How would you write this line of code using Java 7 APIs?</p>
<p class="quep"><img src="images/un322-02.jpg" alt="Images" /></p>
<p class="que1"><strong><a id="ch5ans10" href="ch5.xhtml#r_ch5ans10">10</a>.</strong>   Given:</p>
<p class="imageqp"><img src="images/un322-03.jpg" alt="Images" /></p>
<p class="quep">Which code inserted at <code>// CODE HERE</code> will compile and run without error on Windows? (Choose all that apply.)</p>
<p class="quep"><img src="images/un322-04.jpg" alt="Images" /></p>
<p class="quep"><span id="page_323" epub:type="pagebreak"></span><img src="images/un323-01.jpg" alt="Images" /></p>
<p class="que1"><strong><a id="ch5ans11" href="ch5.xhtml#r_ch5ans11">11</a>.</strong>   Which of the following are true? (Choose all that apply.)</p>
<p class="alpha">A.   The class <code>AbstractFileAttributes</code> applies to all operating systems</p>
<p class="alpha">B.   The class <code>BasicFileAttributes</code> applies to all operating systems</p>
<p class="alpha">C.   The class <code>DosFileAttributes</code> applies to Windows-based operating systems</p>
<p class="alpha">D.   The class <code>WindowsFileAttributes</code> applies to Windows-based operating systems</p>
<p class="alpha">E.   The class <code>PosixFileAttributes</code> applies to all Linux/UNIX-based operating systems</p>
<p class="alpha">F.   The class <code>UnixFileAttributes</code> applies to all Linux/UNIX-based operating systems</p>
<p class="que1"><strong><a id="ch5ans12" href="ch5.xhtml#r_ch5ans12">12</a>.</strong>   Given a partial directory tree:</p>
<p class="imageqp"><img src="images/un323-02.jpg" alt="Images" /></p>
<p class="quep">In what order can the following methods be called if walking the directory tree from <code>x</code>? (Choose all that apply.)</p>
<p class="romani">I: preVisitDirectory x</p>
<p class="romani">II: preVisitDirectory x/y</p>
<p class="romani">III: postVisitDirectory x/y</p>
<p class="romani">IV: postVisitDirectory x</p>
<p class="romani">V: visitFile x/a</p>
<p class="alpha">A.   I, II, III, IV, V</p>
<p class="alpha">B.   I, II, III, V, IV</p>
<p class="alpha">C.   I, V, II, III, IV</p>
<p class="alpha">D.   I, V, II, IV, III</p>
<p class="alpha">E.   V, I, II, III, IV</p>
<p class="alpha">F.   V, I, II, IV, III</p>
<p class="que1"><span id="page_324" epub:type="pagebreak"></span><strong><a id="ch5ans13" href="ch5.xhtml#r_ch5ans13">13</a>.</strong>   Given:</p>
<p class="imageqp"><img src="images/un324-01.jpg" alt="Images" /></p>
<p class="quep">Which code inserted at <code>// CODE HERE</code> would cause the <code>FileVisitor</code> to stop visiting files after it sees the file <code>Test.java</code>?</p>
<p class="quep"><img src="images/un324-02.jpg" alt="Images" /></p>
<p class="que1"><strong><a id="ch5ans14" href="ch5.xhtml#r_ch5ans14">14</a>.</strong>   Assume all the files referenced by these paths exist:</p>
<p class="imageqp"><img src="images/un324-03.jpg" alt="Images" /></p>
<p class="quep">What is the correct string to pass to <code>PathMatcher</code> to match both these files?</p>
<p class="alpha">A.   <code>"glob:*/*.txt"</code></p>
<p class="alpha">B.   <code>"glob:**.txt"</code></p>
<p class="alpha">C.   <code>"glob:*.txt"</code></p>
<p class="alpha">D.   <code>"glob:/*/*.txt"</code></p>
<p class="alpha">E.   <code>"glob:/**.txt"</code></p>
<p class="alpha">F.   <code>"glob:/*.txt"</code></p>
<p class="alpha">G.   None of the above</p>
<p class="que1"><strong><a id="ch5ans15" href="ch5.xhtml#r_ch5ans15">15</a>.</strong>   Given a partial directory tree at the root of the drive:</p>
<p class="imageqp"><img src="images/un324-05.jpg" alt="Images" /></p>
<p class="quep"><span id="page_325" epub:type="pagebreak"></span>And the following snippet:</p>
<p class="imageqp"><img src="images/un325-01.jpg" alt="Images" /></p>
<p class="quep">What is the result?</p>
<p class="quep"><img src="images/un325-02.jpg" alt="Images" /></p>
<p class="que1"><strong><a id="ch5ans16" href="ch5.xhtml#r_ch5ans16">16</a>.</strong>   Given a partial directory tree:</p>
<p class="imageqp"><img src="images/un325-03.jpg" alt="Images" /></p>
<p class="queaa">and given that a valid <code>Path</code> object, <code>dir</code>, points to <code>x</code>, and given this snippet:</p>
<p class="imageip"><img src="images/un325-04.jpg" alt="images" /></p>
<p class="quep">If a <code>WatchService</code> is set using the given <code>WatchKey</code>, what would be the result if a file is added to <code>dir y</code>?</p>
<p class="alpha">A.   No notice is given</p>
<p class="alpha">B.   A notice related to <code>dir x</code> is issued</p>
<p class="alpha">C.   A notice related to <code>dir y</code> is issued</p>
<p class="alpha">D.   Notices for both <code>dir x</code> and <code>dir y</code> are given</p>
<p class="alpha">E.   An exception is thrown</p>
<p class="alpha">F.   The behavior depends on the underlying operating system</p>
<p class="que1"><strong><a id="ch5ans17" href="ch5.xhtml#r_ch5ans17">17</a>.</strong>   Given:</p>
<p class="imageqp"><img src="images/un325-05.jpg" alt="Images" /></p>
<p class="imageip"><span id="page_326" epub:type="pagebreak"></span><img src="images/un326-01.jpg" alt="Images" /></p>
<p class="quep">What is the result?</p>
<p class="alpha">A.   <code>pc</code></p>
<p class="alpha">B.   <code>pcc</code></p>
<p class="alpha">C.   <code>pcp</code></p>
<p class="alpha">D.   <code>pcpc</code></p>
<p class="alpha">E.   Compilation fails</p>
<p class="alpha">F.   An exception is thrown at runtime</p>
<p class="que1"><strong><a id="ch5ans18" href="ch5.xhtml#r_ch5ans18">18</a>.</strong>   Given:</p>
<p class="imageqp"><img src="images/un326-02.jpg" alt="Images" /></p>
<p class="quep"><span id="page_327" epub:type="pagebreak"></span>What is the result? (Choose all that apply.)</p>
<p class="alpha">A.   <code>exc</code></p>
<p class="alpha">B.   <code>done</code></p>
<p class="alpha">C.   Compilation fails</p>
<p class="alpha">D.   Exactly one object is serialized</p>
<p class="alpha">E.   Exactly two objects are serialized</p>
<p class="que1"><strong><a id="ch5ans19" href="ch5.xhtml#r_ch5ans19">19</a>.</strong>   Given:</p>
<p class="imageqp"><img src="images/un327-01.jpg" alt="Images" /></p>
<p class="quep">Which are true? (Choose all that apply.)</p>
<p class="alpha">A.   Compilation fails</p>
<p class="alpha">B.   The output is <code>10 0 9</code></p>
<p class="alpha">C.   The output is <code>10 0 10</code></p>
<p class="alpha">D.   The output is <code>10 7 9</code></p>
<p class="alpha">E.   The output is <code>10 7 10</code></p>
<p class="alpha">F.   In order to alter the standard deserialization process, you would implement the <code>readObject()</code> method in <code>SpecialSerial</code></p>
<p class="alpha">G.   In order to alter the standard deserialization process, you would implement the <code>defaultReadObject()</code> method in <code>SpecialSerial</code></p>
<h3 class="h3b" id="ch5lev2sec28"><span id="page_328" epub:type="pagebreak"></span><img src="images/aself.jpg" alt="Images" /> SELF TEST ANSWERS</h3>
<p class="que-q"><strong><a href="ch5.xhtml#ch5ans1" id="r_ch5ans1">1</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>Answer:</strong></p>
<p class="imageip"><img src="images/un328-01.jpg" alt="Images" /></p>
<p class="quep">Notes: The <code>new File</code> statements don’t make actual files or directories, just objects. You need the <code>mkdir()</code>and <code>createNewFile()</code>methods to actually create the directory and the file. While drag-and-drop questions are no longer on the exam, it is still good to be able to complete them. (OCP Objective 8.2)</p>
<p class="que-q"><strong><a href="ch5.xhtml#ch5ans2" id="r_ch5ans2">2</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>A</strong> and <strong>B</strong> are correct. Because you are invoking the program from the directory whose direct subdirectories are to be searched, you don’t start your path with a <code>File.separator</code> character. The <code>exists()</code>method tests for either files or directories; the <code>isFile()</code> method tests only for files. Since we’re looking for a file, both methods work.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>C</strong> and <strong>D</strong> are incorrect based on the above. (OCP Objective 8.2)</p>
<p class="que-q"><strong><a href="ch5.xhtml#ch5ans3" id="r_ch5ans3">3</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>E</strong> is correct. You need to call <code>flush()</code>only when you’re writing data. Readers don’t have <code>flush()</code> methods. If not for the call to <code>flush()</code>, answer <strong>C</strong> would be correct.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>A, B, C,</strong> and <strong>D</strong> are incorrect based on the above. (OCP Objective 8.2)</p>
<p class="que-q"><strong><a href="ch5.xhtml#ch5ans4" id="r_ch5ans4">4</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>D</strong> is correct. The <code>readPassword()</code> method returns a <code>char[]</code>. If a <code>char[]</code> were used, answer <strong>B</strong> would be correct.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>A, B, C,</strong> and <strong>E</strong> are incorrect based on the above. (OCP Objective 8.1)</p>
<p class="que-q"><strong><a href="ch5.xhtml#ch5ans5" id="r_ch5ans5">5</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>A</strong> and <strong>B</strong> are correct. <code>Dodge</code> instances cannot be serialized because they “have” an instance of <code>Wheels</code>, which is not serializable. <code>Vehicle</code> instances cannot be serialized even though the subclass <code>Car</code> can be.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>C, D,</strong> and <strong>E</strong> are incorrect based on the above. (Pre-OCPJP 7 only)</p>
<p class="que-q"><strong><a href="ch5.xhtml#ch5ans6" id="r_ch5ans6">6</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>E</strong> and <strong>F</strong> are correct since <code>Paths</code> must be created using the <code>Paths.get()</code> method. This method takes a varargs <code>String</code> parameter, so you can pass as many path segments to it as you like.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>A</strong> and <strong>B</strong> are incorrect because you cannot construct a <code>Path</code> directly. <strong>C</strong> and <strong>D</strong> are incorrect because the <code>Files</code> class works with <code>Path</code> objects but does not create them from Strings. (Objective 9.1)</p>
<p class="que-q"><span id="page_329" epub:type="pagebreak"></span><strong><a href="ch5.xhtml#ch5ans7" id="r_ch5ans7">7</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>A</strong> is correct because it prints the path to get to <code>two</code> from <code>one</code>.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>B</strong> is incorrect because it prints out <code>../..</code>, which is the path to navigate to <code>one</code> from <code>two</code>. This is the reverse of what we want. <strong>C, D,</strong> and <strong>E</strong> are incorrect because it does not make sense to call <code>resolve</code> with absolute paths. They <strong>might</strong> print out <code>c:/x/c:/x/y/a</code>, <code>c:/x/y/a/c:/x</code>, and <code>c:/x/y/a/c:/x/y/a</code>, respectively. <strong>F</strong> is incorrect because of the above. Note that the directory structure provided is redundant. Neither <code>relativize()</code> nor <code>resolve()</code> requires either path to actually exist. (OCP Objective 9.1)</p>
<p class="que-q"><strong><a href="ch5.xhtml#ch5ans8" id="r_ch5ans8">8</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>E</strong> is correct because a directory containing files or subdirectories is copied or moved in its entirety. Directories can only be deleted if they are empty. Trying to delete a nonempty directory will throw a <code>DirectoryNotEmptyException</code>. The question says “usually” because copy and move success depends on file permissions. Think about the most common cases when encountering words such as “usually” on the exam.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>A, B, C, D, F,</strong> and <strong>G</strong> are incorrect because of the above. (OCP Objective 9.2)</p>
<p class="que-q"><strong><a href="ch5.xhtml#ch5ans9" id="r_ch5ans9">9</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>B</strong> is correct because, like the Java 7 code, it returns <code>false</code> if the file does not exist.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>A</strong> is incorrect because this code throws an exception if the file does not exist.<strong>C, D, E,</strong> and <strong>F</strong> are incorrect because they do not compile. There is no <code>deleteOnExit()</code> method, and file operations such as delete occur using the <code>Files</code> class rather than the path object directly. (OCP Objective 9.2)</p>
<p class="que-q1"><strong><a href="ch5.xhtml#ch5ans10" id="r_ch5ans10">10</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>A, B,</strong> and <strong>D</strong> are correct. Creation time is a basic attribute, which means you can read <code>BasicFileAttributes</code> or any of its subclasses to read it. <code>DosFileAttributes</code> is one such subclass.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>C</strong> is incorrect because you cannot cast a more general type to a more specific type. <strong>E</strong> is incorrect because this example specifies it is being run on Windows. Although it would work on UNIX, it throws an <code>UnsupportedOperationException</code> on Windows due to requesting the <code>WindowsFileSystemProvider</code> to get a POSIX class. <strong>F</strong> and <strong>G</strong> are incorrect because those methods do not exist. You must use the <code>Files</code> class to get the attributes. (OCP Objective 9.2)</p>
<p class="que-q1"><strong><a href="ch5.xhtml#ch5ans11" id="r_ch5ans11">11</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>B, C,</strong> and <strong>E</strong> are correct. <code>BasicFileAttributes</code> is the general superclass. <code>DosFileAttributes</code> subclasses <code>BasicFileAttributes</code> for Windows operating systems. <code>PosixFileAttributes</code> subclasses <code>BasicFileAttributes</code> for UNIX/Linux/Mac operating systems.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>A, D,</strong> and <strong>F</strong> are incorrect because no such classes exist. (OCP Objective 9.2)</p>
<p class="que-q1"><strong><a href="ch5.xhtml#ch5ans12" id="r_ch5ans12">12</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>B</strong> and <strong>C</strong> are correct because file visitor does a depth-first search. When files and directories are at the same level of the file tree, they can be visited in either order. Therefore, “<code>y</code>” and “<code>a</code>” could be reversed. All of the subdirectories and files are visited before <code>postVisit</code> is called on the directory.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>A, D,</strong> <strong>E,</strong> and <strong>F</strong> are incorrect because of the above. (OCP Objective 9.2)</p>
<p class="que-q1"><span id="page_330" epub:type="pagebreak"></span><strong><a href="ch5.xhtml#ch5ans13" id="r_ch5ans13">13</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>E</strong> is correct because it is the correct constant to end the <code>FileVisitor</code>.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>B</strong> is incorrect because <code>END</code> is not defined as a result constant. <strong>A, C,</strong> and <strong>D</strong> are incorrect. Although they are valid constants, they do not end file visiting. <code>CONTINUE</code> proceeds as if nothing special has happened. <code>SKIP_SUBTREE</code> skips the subdirectory, which doesn’t even make sense for a Java file. <code>SKIP_SIBLINGS</code> would skip any files in the same directory. Since we weren’t told what the file structure is, we can’t assume there weren’t other directories or subdirectories. Therefore, we have to choose the most general answer of <code>TERMINATE</code>.<strong> F</strong> is incorrect because file visitor throws a <code>NullPointerException</code> if null is returned as the result. (OCP Objective 9.2)</p>
<p class="que-q1"><strong><a href="ch5.xhtml#ch5ans14" id="r_ch5ans14">14</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>B</strong> is correct. <code>**</code> matches zero or more characters, including multiple directories.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>A</strong> is incorrect because <code>*/</code> only matches one directory. It will match “<code>temp</code>” but not “<code>c:/temp</code>,” let alone “<code>c:/temp/dir</code>.” <strong>C</strong> is incorrect because <code>*.txt</code> only matches filenames and not directory paths. <strong>D, E,</strong> and<strong> F</strong> are incorrect because the paths we want to match do not begin with a slash. <strong>G</strong> is incorrect because of the above. (OCP Objective 9.2)</p>
<p class="que-q1"><strong><a href="ch5.xhtml#ch5ans15" id="r_ch5ans15">15</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>C</strong> is correct because <code>DirectoryStream</code> only looks at files in the immediate directory. <code>**/*.txt</code> means zero or more directories followed by a slash, followed by zero or more characters followed by <code>.txt</code>. Since the slash is in there, it is required to match, which makes it mean one or more directories. However, this is impossible because <code>DirectoryStream</code> only looks at one directory. If the expression were simply <code>*.txt</code>, answer <strong>A</strong> would be correct.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>A, B, D,</strong> and <strong>E</strong> are incorrect because of the above. (OCP Objective 9.2).</p>
<p class="que-q1"><strong><a href="ch5.xhtml#ch5ans16" id="r_ch5ans16">16</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>A</strong> is correct because <code>WatchService</code> only looks at a single directory. If you want to look at subdirectories, you need to set recursive watch keys. This is usually done using a <code>FileVisitor</code>.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>B, C, D, E,</strong> and <strong>F</strong> are incorrect because of the above. (OCP Objective 9.2).</p>
<p class="que-q1"><strong><a href="ch5.xhtml#ch5ans17" id="r_ch5ans17">17</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>C</strong> is correct. It’s okay for a class to implement <code>Serializable</code> even if its superclass doesn’t. However, when you deserialize such an object, the non-serializable superclass must run its constructor. Remember, constructors don’t run on deserialized classes that implement <code>Serializable</code>.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>A, B, D, E,</strong> and<strong> F</strong> are incorrect based on the above. (OCP Objective 8.2)</p>
<p class="que-q1"><strong><a href="ch5.xhtml#ch5ans18" id="r_ch5ans18">18</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>A</strong> is correct. An instance of type <code>Computer</code> Has-a <code>Keyboard</code>. Because <code>Keyboard</code> doesn’t implement <code>Serializable</code>, any attempt to serialize an instance of <code>Computer</code> will cause an exception to be thrown.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>B,</strong> <strong>C, D,</strong> and<strong> E</strong> are incorrect based on the above. If <code>Keyboard</code> did implement <code>Serializable</code>, then two objects would have been serialized. (OCP Objective 8.2)</p>
<p class="que-q1"><strong><a href="ch5.xhtml#ch5ans19" id="r_ch5ans19">19</a>.</strong>   <img src="images/tick2.jpg" alt="Images" />   <strong>C</strong> and<strong> F</strong> are correct.<strong> C</strong> is correct because <code>static</code> and <code>transient</code> variables are not serialized when an object is serialized. <strong>F</strong> is a valid statement.</p>
<p class="quep"><img src="images/times.jpg" alt="Images" />   <strong>A, B, D,</strong> and <strong>E</strong> are incorrect based on the above. <strong>G</strong> is incorrect because you don’t implement the <code>defaultReadObject()</code> method; you call it from within the <code>readObject()</code> method, along with any custom read operations your class needs. (OCP Objective 8.2)</p>
</section>
</div>
</body>
</html>